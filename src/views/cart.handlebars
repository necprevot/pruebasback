<div class="cart-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; padding-bottom: 15px; border-bottom: 2px solid var(--border-color);">
    <h2>üõí Carrito: {{cartId}}</h2>
    <div class="cart-actions">
        <a href="/products" class="btn-secondary" style="text-decoration: none; margin-right: 10px;">‚Üê Seguir Comprando</a>
        {{#if hasProducts}}
            <button onclick="clearCart()" class="btn-danger">Vaciar Carrito</button>
        {{/if}}
    </div>
</div>

<!-- Alertas -->
<div id="alertContainer"></div>

{{#if error}}
    <div class="alert alert-danger">
        <strong>Error:</strong> {{error}}
    </div>
{{/if}}

{{#if hasProducts}}
    <!-- Productos en el carrito -->
    <div id="cartProducts">
        {{#each cart.products}}
            <div class="cart-product-item" data-product-id="{{this.product._id}}" data-quantity="{{this.quantity}}" data-price="{{this.product.price}}">
                <div class="cart-product-card">
                    <div class="cart-product-info">
                        <div class="cart-product-image">
                            {{#if this.product.thumbnails}}
                                {{#if this.product.thumbnails.length}}
                                    {{#each this.product.thumbnails}}
                                        {{#if @first}}
                                            <img src="{{this}}" 
                                                 alt="{{../product.title}}" 
                                                 class="product-image-small" 
                                                 onerror="this.style.display='none';">
                                        {{/if}}
                                    {{/each}}
                                {{else}}
                                    <div class="no-image">üì¶</div>
                                {{/if}}
                            {{else}}
                                <div class="no-image">üì¶</div>
                            {{/if}}
                        </div>
                        
                        <div class="cart-product-details">
                            <h4 class="cart-product-title">{{this.product.title}}</h4>
                            <p class="cart-product-description">{{this.product.description}}</p>
                            <div class="cart-product-meta">
                                <span class="product-price">${{this.product.price}} c/u</span>
                                <span class="product-category">{{this.product.category}}</span>
                                <span class="product-code">C√≥digo: {{this.product.code}}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="cart-product-actions">
                        <div class="quantity-controls">
                            <label>Cantidad:</label>
                            <div class="quantity-input-group">
                                <button onclick="updateQuantityByButton('{{this.product._id}}', -1)" class="btn-quantity">-</button>
                                <input type="number" 
                                       id="quantity-{{this.product._id}}" 
                                       value="{{this.quantity}}" 
                                       min="1" 
                                       max="{{this.product.stock}}"
                                       onchange="updateQuantity('{{this.product._id}}', this.value)"
                                       class="quantity-input"
                                       data-product-price="{{this.product.price}}">
                                <button onclick="updateQuantityByButton('{{this.product._id}}', 1)" class="btn-quantity">+</button>
                            </div>
                            <small class="stock-info">Stock disponible: {{this.product.stock}}</small>
                        </div>
                        
                        <div class="subtotal-section">
                            <div class="subtotal">
                                <strong>Subtotal: $<span id="subtotal-{{this.product._id}}">{{multiply this.product.price this.quantity}}</span></strong>
                            </div>
                            <button onclick="removeFromCart('{{this.product._id}}')" class="btn-danger remove-product-btn">
                                üóëÔ∏è Eliminar
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        {{/each}}
    </div>
    
    <!-- Resumen del carrito -->
    <div class="cart-summary">
        <div class="summary-content">
            <div class="summary-row">
                <span>Total de productos:</span>
                <span id="totalItems">{{#if totalItems}}{{totalItems}}{{else}}0{{/if}}</span>
            </div>
            <div class="summary-row total-row">
                <span><strong>Total a pagar:</strong></span>
                <span id="totalAmount"><strong>$<span id="calculatedTotal">{{total}}</span></strong></span>
            </div>
        </div>
        
        <div class="checkout-actions">
            <button onclick="proceedToCheckout()" class="btn-success checkout-btn">
                üí≥ Proceder al Pago
            </button>
            <button onclick="saveForLater()" class="btn-secondary">
                üíæ Guardar para despu√©s
            </button>
        </div>
    </div>
    
{{else}}
    <!-- Carrito vac√≠o -->
    <div class="empty-cart">
        <div class="empty-cart-icon">üõí</div>
        <h3>Tu carrito est√° vac√≠o</h3>
        <p>No hay productos en este carrito. ¬°Agrega algunos productos para comenzar!</p>
        <a href="/products" class="btn-primary">üõçÔ∏è Ir de Compras</a>
    </div>
{{/if}}

<script>
// Asegurarse de que cartId sea un string v√°lido
let cartId = '{{cartId}}'.trim();

// Verificar que el cartId sea v√°lido
if (!cartId || cartId === '[object Object]' || cartId === 'undefined' || cartId === 'null') {
    
    
    // Intentar obtener del localStorage
    const storedCartId = localStorage.getItem('bbfermentos_cart_id');
    
    if (storedCartId && storedCartId !== '[object Object]' && storedCartId !== 'undefined') {
        window.location.href = `/carts/${storedCartId}`;
    } else {
        
        window.location.href = '/products';
    }
    
    // Detener ejecuci√≥n del resto del script
    throw new Error('CartId inv√°lido');
}

/**
 * Objeto para gestionar el carrito en localStorage
 */
const CartSession = {
    save: function(cartId) {
        if (!cartId || cartId === 'undefined' || cartId === 'null') {
            console.error('‚ùå Intentando guardar cartId inv√°lido:', cartId);
            return;
        }
        console.log('üíæ Guardando carrito:', cartId);
        localStorage.setItem('bbfermentos_cart_id', cartId);
        localStorage.setItem('bbfermentos_cart_timestamp', Date.now().toString());
    },
    
    get: function() {
        const cartId = localStorage.getItem('bbfermentos_cart_id');
        const timestamp = localStorage.getItem('bbfermentos_cart_timestamp');
        
        if (cartId && timestamp) {
            const age = Date.now() - parseInt(timestamp);
            const maxAge = 24 * 60 * 60 * 1000;
            
            if (age < maxAge) {
                return cartId;
            } else {
                console.log('‚è∞ Carrito expirado, limpiando...');
                this.clear();
            }
        }
        return null;
    },
    
    clear: function() {
        console.log('üßπ Limpiando carrito del localStorage');
        localStorage.removeItem('bbfermentos_cart_id');
        localStorage.removeItem('bbfermentos_cart_timestamp');
    },
    
    verify: async function(cartId) {
        if (!cartId) return false;
        try {
            const response = await fetch(`/api/carts/${cartId}`);
            return response.ok;
        } catch (error) {
            console.error('Error verificando carrito:', error);
            return false;
        }
    }
};


// Funciones de c√°lculo
function calculateTotals() {
    let totalItems = 0;
    let totalAmount = 0;
    
    const productItems = document.querySelectorAll('.cart-product-item');
    
    productItems.forEach((item) => {
        const quantityInput = item.querySelector('.quantity-input');
        const price = parseFloat(item.dataset.price);
        
        if (quantityInput && price) {
            const quantity = parseInt(quantityInput.value) || 0;
            const subtotal = price * quantity;
            
            totalItems += quantity;
            totalAmount += subtotal;
            
            const subtotalElement = item.querySelector(`#subtotal-${item.dataset.productId}`);
            if (subtotalElement) {
                subtotalElement.textContent = Math.round(subtotal);
            }
            
            item.dataset.quantity = quantity;
        }
    });
    
    const totalItemsElement = document.getElementById('totalItems');
    const calculatedTotalElement = document.getElementById('calculatedTotal');
    
    if (totalItemsElement) {
        totalItemsElement.textContent = totalItems;
    }
    
    if (calculatedTotalElement) {
        calculatedTotalElement.textContent = Math.round(totalAmount);
    }
    
    return { totalItems, totalAmount };
}

async function syncWithServer() {
    try {
        const response = await fetch(`/api/carts/${cartId}`);
        
        if (response.ok) {
            const data = await response.json();
            const serverCart = data.cart;
            
            serverCart.products.forEach(serverItem => {
                const quantityInput = document.getElementById(`quantity-${serverItem.product._id}`);
                const clientQuantity = parseInt(quantityInput?.value || 0);
                
                if (clientQuantity !== serverItem.quantity) {
                    if (quantityInput) {
                        quantityInput.value = serverItem.quantity;
                        quantityInput.defaultValue = serverItem.quantity;
                    }
                }
            });
            
            calculateTotals();
        }
    } catch (error) {
        
    }
}

function handleQuantityInputChange(productId) {
    const quantityInput = document.getElementById(`quantity-${productId}`);
    if (!quantityInput) return;
    
    const newQuantity = parseInt(quantityInput.value);
    const oldQuantity = parseInt(quantityInput.defaultValue || 1);
    
    if (newQuantity !== oldQuantity) {
        updateQuantity(productId, newQuantity);
    }
}

// Ejecutar c√°lculo al cargar la p√°gina
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        calculateTotals();
    }, 100);
});

// Actualizar cantidad de producto
async function updateQuantity(productId, newQuantity) {
    newQuantity = parseInt(newQuantity);
    
    if (newQuantity < 1) {
        if (confirm('¬øQuieres eliminar este producto del carrito?')) {
            await removeFromCart(productId);
        } else {
            const quantityInput = document.getElementById(`quantity-${productId}`);
            if (quantityInput) {
                quantityInput.value = quantityInput.defaultValue || 1;
            }
            calculateTotals();
        }
        return;
    }
    
    try {
        const token = localStorage.getItem('bbfermentos_auth_token');
        const headers = {
            'Content-Type': 'application/json'
        };
        
        if (token) {
            headers['Authorization'] = `Bearer ${token}`;
        }
        
        const response = await fetch(`/api/carts/${cartId}/product/${productId}`, {
            method: 'PUT',
            headers: headers,
            body: JSON.stringify({ quantity: newQuantity })
        });
        
        // üîß MANEJAR ERROR 403 Y 400
        if (response.status === 403 || response.status === 400) {
            const error = await response.json();
            console.log('‚ö†Ô∏è Error de autorizaci√≥n:', error);
            
            // Si el servidor indica un carrito correcto, redirigir
            if (error.correctCartId) {
                console.log('üîÑ Redirigiendo al carrito correcto...');
                CartSession.save(error.correctCartId);
                window.location.href = `/carts/${error.correctCartId}`;
                return;
            }
            
            // Si es error de autorizaci√≥n sin carrito correcto, recargar usuario
            showAlert('‚ö†Ô∏è Carrito desincronizado. Recargando...', 'warning');
            
            // Intentar obtener info del usuario actual
            if (token) {
                try {
                    const userResponse = await fetch('/api/sessions/current', {
                        headers: { 'Authorization': `Bearer ${token}` }
                    });
                    
                    if (userResponse.ok) {
                        const userData = await userResponse.json();
                        const userCartId = userData.payload.cart;
                        
                        if (userCartId) {
                            console.log('‚úÖ Carrito del usuario encontrado:', userCartId);
                            CartSession.save(userCartId);
                            window.location.href = `/carts/${userCartId}`;
                            return;
                        }
                    }
                } catch (e) {
                    console.error('Error obteniendo usuario:', e);
                }
            }
            
            // Como √∫ltimo recurso, ir a productos
            setTimeout(() => {
                window.location.href = '/products';
            }, 2000);
            return;
        }
        
        if (response.ok) {
            const productItem = document.querySelector(`[data-product-id="${productId}"]`);
            if (productItem) {
                productItem.dataset.quantity = newQuantity;
            }
            
            const quantityInput = document.getElementById(`quantity-${productId}`);
            if (quantityInput) {
                quantityInput.value = newQuantity;
                quantityInput.defaultValue = newQuantity;
            }
            
            calculateTotals();
            showAlert('Cantidad actualizada', 'success');
            
        } else {
            const error = await response.json();
            throw new Error(error.message);
        }
    } catch (error) {
        console.error('Error actualizando cantidad:', error);
        showAlert('Error: ' + error.message, 'danger');
        
        const quantityInput = document.getElementById(`quantity-${productId}`);
        if (quantityInput) {
            quantityInput.value = quantityInput.defaultValue || 1;
        }
        calculateTotals();
    }
}


// Eliminar producto del carrito
async function removeFromCart(productId) {
    if (!confirm('¬øEst√°s seguro de que quieres eliminar este producto?')) {
        return;
    }
    
    try {
        const token = localStorage.getItem('bbfermentos_auth_token');
        const headers = {};
        
        if (token) {
            headers['Authorization'] = `Bearer ${token}`;
        }
        
        const response = await fetch(`/api/carts/${cartId}/product/${productId}`, {
            method: 'DELETE',
            headers: headers
        });
        
        // üîß MANEJAR ERROR 403 Y 400
        if (response.status === 403 || response.status === 400) {
            const error = await response.json();
            
            if (error.correctCartId) {
                console.log('üîÑ Redirigiendo al carrito correcto...');
                CartSession.save(error.correctCartId);
                window.location.href = `/carts/${error.correctCartId}`;
                return;
            }
            
            showAlert('‚ö†Ô∏è Error de autorizaci√≥n. Recargando...', 'warning');
            setTimeout(() => window.location.reload(), 1500);
            return;
        }
        
        if (response.ok) {
            showAlert('Producto eliminado del carrito', 'success');
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        } else {
            const error = await response.json();
            showAlert('Error: ' + error.message, 'danger');
        }
    } catch (error) {
        console.error('Error eliminando producto:', error);
        showAlert('Error de conexi√≥n', 'danger');
    }
}

// Vaciar carrito completo
async function clearCart() {
    if (!confirm('¬øEst√°s seguro de que quieres vaciar todo el carrito?')) {
        return;
    }
    
    try {
        const token = localStorage.getItem('bbfermentos_auth_token');
        const headers = {};
        
        if (token) {
            headers['Authorization'] = `Bearer ${token}`;
        }
        
        const response = await fetch(`/api/carts/${cartId}`, {
            method: 'DELETE',
            headers: headers
        });
        
        if (response.ok) {
            showAlert('Carrito vaciado', 'success');
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        } else {
            const error = await response.json();
            showAlert('Error: ' + error.message, 'danger');
        }
    } catch (error) {
        
        showAlert('Error de conexi√≥n', 'danger');
    }
}

// Actualizar display del carrito
async function updateCartDisplay() {
    try {
        const response = await fetch(`/api/carts/${cartId}`);
        if (response.ok) {
            const data = await response.json();
            const cart = data.cart;
            
            cart.products.forEach(item => {
                const quantityInput = document.getElementById(`quantity-${item.product._id}`);
                if (quantityInput) {
                    quantityInput.value = item.quantity;
                }
            });
            
            calculateTotals();
        }
    } catch (error) {
        
    }
}

// ==========================================
// CHECKOUT - PROCEDER AL PAGO
// ==========================================

function proceedToCheckout() {
    const totals = calculateTotals();
    
    if (totals.totalItems === 0) {
        showAlert('El carrito est√° vac√≠o', 'warning');
        return;
    }
    
    // Verificar autenticaci√≥n
    const token = localStorage.getItem('bbfermentos_auth_token');
    if (!token) {
        showAlert('Debes iniciar sesi√≥n para realizar una compra', 'warning');
        localStorage.setItem('bbfermentos_redirect_after_login', window.location.href);
        setTimeout(() => {
            window.location.href = '/login';
        }, 1500);
        return;
    }
    
    showCheckoutModal();
}

// Mostrar modal de checkout con formulario de direcci√≥n
function showCheckoutModal() {
    const modalHTML = `
        <div id="checkoutModal" style="display: block; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.6); z-index: 2000;">
            <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 30px; border-radius: 12px; max-width: 600px; width: 90%; max-height: 90vh; overflow-y: auto; box-shadow: 0 10px 40px rgba(0,0,0,0.3);">
                
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px; border-bottom: 2px solid #dee2e6; padding-bottom: 15px;">
                    <h2 style="margin: 0; color: #000;">üõí Finalizar Compra</h2>
                    <button onclick="closeCheckoutModal()" style="background: none; border: none; font-size: 28px; cursor: pointer; color: #666;">&times;</button>
                </div>

                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                    <h4 style="margin: 0 0 10px 0;">üì¶ Resumen del pedido</h4>
                    <div style="display: flex; justify-content: space-between; margin: 5px 0;">
                        <span>Items:</span>
                        <span id="checkoutItems">0</span>
                    </div>
                    <div style="display: flex; justify-content: space-between; margin: 5px 0; font-weight: bold; font-size: 1.1em; color: #28a745;">
                        <span>Total:</span>
                        <span>$<span id="checkoutTotal">0</span></span>
                    </div>
                </div>

                <form id="checkoutForm" style="margin-bottom: 20px;">
                    <h4 style="margin: 20px 0 15px 0;">üìç Direcci√≥n de Env√≠o</h4>
                    
                    <div style="margin-bottom: 15px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: 600;">Calle y N√∫mero *</label>
                        <input type="text" id="street" name="street" required 
                               style="width: 100%; padding: 10px; border: 1px solid #dee2e6; border-radius: 4px; box-sizing: border-box;"
                               placeholder="Av. Siempre Viva 123">
                    </div>

                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;">
                        <div>
                            <label style="display: block; margin-bottom: 5px; font-weight: 600;">Ciudad *</label>
                            <input type="text" id="city" name="city" required 
                                   style="width: 100%; padding: 10px; border: 1px solid #dee2e6; border-radius: 4px; box-sizing: border-box;"
                                   placeholder="Santiago">
                        </div>
                        <div>
                            <label style="display: block; margin-bottom: 5px; font-weight: 600;">Regi√≥n *</label>
                            <input type="text" id="state" name="state" required 
                                   style="width: 100%; padding: 10px; border: 1px solid #dee2e6; border-radius: 4px; box-sizing: border-box;"
                                   placeholder="Metropolitana">
                        </div>
                    </div>

                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;">
                        <div>
                            <label style="display: block; margin-bottom: 5px; font-weight: 600;">C√≥digo Postal *</label>
                            <input type="text" id="zipCode" name="zipCode" required 
                                   style="width: 100%; padding: 10px; border: 1px solid #dee2e6; border-radius: 4px; box-sizing: border-box;"
                                   placeholder="8320000">
                        </div>
                        <div>
                            <label style="display: block; margin-bottom: 5px; font-weight: 600;">Tel√©fono *</label>
                            <input type="tel" id="phone" name="phone" required 
                                   style="width: 100%; padding: 10px; border: 1px solid #dee2e6; border-radius: 4px; box-sizing: border-box;"
                                   placeholder="+56 9 1234 5678">
                        </div>
                    </div>

                    <div style="margin-bottom: 15px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: 600;">Pa√≠s</label>
                        <input type="text" id="country" name="country" value="Chile" 
                               style="width: 100%; padding: 10px; border: 1px solid #dee2e6; border-radius: 4px; background: #e9ecef; box-sizing: border-box;"
                               readonly>
                    </div>

                    <div style="margin-bottom: 20px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: 600;">Informaci√≥n Adicional</label>
                        <textarea id="additionalInfo" name="additionalInfo" rows="3"
                                  style="width: 100%; padding: 10px; border: 1px solid #dee2e6; border-radius: 4px; box-sizing: border-box;"
                                  placeholder="Depto, torre, referencias para la entrega..."></textarea>
                    </div>

                    <h4 style="margin: 20px 0 15px 0;">üí≥ M√©todo de Pago</h4>
                    
                    <div style="margin-bottom: 20px;">
                        <select id="paymentMethod" name="paymentMethod" required
                                style="width: 100%; padding: 12px; border: 1px solid #dee2e6; border-radius: 4px; font-size: 1em; box-sizing: border-box;">
                            <option value="">Selecciona un m√©todo de pago</option>
                            <option value="credit_card">üí≥ Tarjeta de Cr√©dito</option>
                            <option value="debit_card">üí≥ Tarjeta de D√©bito</option>
                            <option value="bank_transfer">üè¶ Transferencia Bancaria</option>
                            <option value="cash_on_delivery">üíµ Pago contra entrega</option>
                        </select>
                    </div>

                    <div style="margin-bottom: 20px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: 600;">Notas del Pedido</label>
                        <textarea id="orderNotes" name="notes" rows="2"
                                  style="width: 100%; padding: 10px; border: 1px solid #dee2e6; border-radius: 4px; box-sizing: border-box;"
                                  placeholder="Comentarios adicionales sobre tu pedido..."></textarea>
                    </div>

                    <div style="background: #fff3cd; border: 1px solid #ffc107; border-radius: 6px; padding: 12px; margin-bottom: 20px;">
                        <small style="color: #856404;">
                            <strong>‚ÑπÔ∏è Informaci√≥n:</strong> El env√≠o es GRATIS en compras sobre $50,000. 
                            Tu pedido ser√° procesado una vez confirmado el pago.
                        </small>
                    </div>

                    <div style="display: flex; gap: 15px; justify-content: flex-end;">
                        <button type="button" onclick="closeCheckoutModal()" 
                                style="padding: 12px 24px; background: #6c757d; color: white; border: none; border-radius: 6px; cursor: pointer; font-size: 1em;">
                            Cancelar
                        </button>
                        <button type="submit" id="confirmOrderBtn"
                                style="padding: 12px 30px; background: linear-gradient(135deg, #28a745, #20c997); color: white; border: none; border-radius: 6px; cursor: pointer; font-size: 1em; font-weight: 600;">
                            <span id="confirmBtnText">‚úÖ Confirmar Pedido</span>
                            <span id="confirmBtnSpinner" style="display: none;">üîÑ Procesando...</span>
                        </button>
                    </div>
                </form>

                <div id="checkoutAlerts"></div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    const totals = calculateTotals();
    document.getElementById('checkoutItems').textContent = totals.totalItems + ' productos';
    document.getElementById('checkoutTotal').textContent = Math.round(totals.totalAmount);
    
    document.getElementById('checkoutForm').addEventListener('submit', handleCheckoutSubmit);
}

function closeCheckoutModal() {
    const modal = document.getElementById('checkoutModal');
    if (modal) {
        modal.remove();
    }
}

async function handleCheckoutSubmit(e) {
    e.preventDefault();
    
    const confirmBtn = document.getElementById('confirmOrderBtn');
    const btnText = document.getElementById('confirmBtnText');
    const btnSpinner = document.getElementById('confirmBtnSpinner');
    
    confirmBtn.disabled = true;
    btnText.style.display = 'none';
    btnSpinner.style.display = 'inline';
    
    try {
        const formData = new FormData(e.target);
        
        const shippingAddress = {
            street: formData.get('street'),
            city: formData.get('city'),
            state: formData.get('state'),
            zipCode: formData.get('zipCode'),
            country: formData.get('country') || 'Chile',
            phone: formData.get('phone'),
            additionalInfo: formData.get('additionalInfo') || ''
        };
        
        const paymentMethod = formData.get('paymentMethod');
        const notes = formData.get('notes') || '';
        
        if (!paymentMethod) {
            showCheckoutAlert('Debes seleccionar un m√©todo de pago', 'warning');
            confirmBtn.disabled = false;
            btnText.style.display = 'inline';
            btnSpinner.style.display = 'none';
            return;
        }
        
        const token = localStorage.getItem('bbfermentos_auth_token');
        
        if (!token) {
            showCheckoutAlert('Sesi√≥n expirada. Redirigiendo al login...', 'error');
            setTimeout(() => {
                window.location.href = '/login';
            }, 2000);
            return;
        }
        
        // VERIFICAR QUE EL CARRITO TENGA PRODUCTOS ANTES DE ENVIAR

        
        try {
            const cartCheckResponse = await fetch(`/api/carts/${cartId}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            
            if (cartCheckResponse.ok) {
                const cartCheckData = await cartCheckResponse.json();
                const productsInCart = cartCheckData.cart.products || [];
                
                
                if (productsInCart.length === 0) {
                    showCheckoutAlert('‚ùå El carrito est√° vac√≠o. Agrega productos antes de continuar.', 'error');
                    confirmBtn.disabled = false;
                    btnText.style.display = 'inline';
                    btnSpinner.style.display = 'none';
                    return;
                }
                
                // Verificar que el carrito coincida con el usuario
                const userData = JSON.parse(localStorage.getItem('bbfermentos_user_data') || '{}');
                if (userData.cart && userData.cart !== cartId) {
                    
                    showCheckoutAlert('‚ö†Ô∏è Hay un problema con tu carrito. Recargando p√°gina...', 'warning');
                    setTimeout(() => {
                        localStorage.setItem('bbfermentos_cart_id', userData.cart);
                        window.location.href = `/carts/${userData.cart}`;
                    }, 2000);
                    return;
                }
            }
        } catch (checkError) {
            
            showCheckoutAlert('Error verificando el carrito. Intenta de nuevo.', 'error');
            confirmBtn.disabled = false;
            btnText.style.display = 'inline';
            btnSpinner.style.display = 'none';
            return;
        }
        
        
        const response = await fetch('/api/orders', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
                shippingAddress,
                paymentMethod,
                notes
            })
        });
        
        const data = await response.json();
        
        if (response.ok && data.status === 'success') {
            
            closeCheckoutModal();
            
            showAlert('‚úÖ ¬°Pedido realizado exitosamente! Orden: ' + (data.payload.order?.orderNumber || ''), 'success');
            
            setTimeout(() => {
                window.location.reload();
            }, 2000);
            
        } else {
            
            
            let errorMessage = data.message || 'Error al procesar el pedido';
            
            if (data.message && data.message.includes('Stock insuficiente')) {
                errorMessage = '‚ö†Ô∏è Algunos productos no tienen stock suficiente. Por favor revisa tu carrito.';
            } else if (data.message && data.message.includes('Carrito')) {
                errorMessage = '‚ö†Ô∏è ' + data.message;
            }
            
            showCheckoutAlert(errorMessage, 'error');
        }
        
    } catch (error) {
        
        showCheckoutAlert('Error de conexi√≥n. Por favor intenta de nuevo.', 'error');
    } finally {
        confirmBtn.disabled = false;
        btnText.style.display = 'inline';
        btnSpinner.style.display = 'none';
    }
}

function showCheckoutAlert(message, type) {
    const alertContainer = document.getElementById('checkoutAlerts');
    if (!alertContainer) return;
    
    const alertTypes = {
        success: { class: 'alert-success', icon: '‚úÖ' },
        error: { class: 'alert-danger', icon: '‚ùå' },
        warning: { class: 'alert-warning', icon: '‚ö†Ô∏è' },
        info: { class: 'alert-info', icon: '‚ÑπÔ∏è' }
    };
    
    const alert = alertTypes[type] || alertTypes.info;
    
    const alertHTML = `
        <div class="alert ${alert.class}" style="margin-top: 15px;">
            ${alert.icon} ${message}
            <button onclick="this.parentElement.remove()" class="alert-close">&times;</button>
        </div>
    `;
    
    alertContainer.innerHTML = alertHTML;
    
    setTimeout(() => {
        const alertElement = alertContainer.querySelector('.alert');
        if (alertElement) alertElement.remove();
    }, 5000);
}

// Guardar para despu√©s
function saveForLater() {
    showAlert('Carrito guardado en tu cuenta', 'success');
}

// Mostrar alertas
function showAlert(message, type) {
    const alertContainer = document.getElementById('alertContainer');
    const alertClass = `alert-${type}`;
    
    const alertHtml = `
        <div class="alert ${alertClass}" style="margin-bottom: 15px;">
            ${message}
            <button onclick="this.parentElement.remove()" style="float: right; background: none; border: none; font-size: 18px; cursor: pointer;">&times;</button>
        </div>
    `;
    
    alertContainer.innerHTML = alertHtml;
    
    setTimeout(() => {
        const alert = alertContainer.querySelector('.alert');
        if (alert) alert.remove();
    }, 5000);
}

function setupQuantityControls() {
    document.querySelectorAll('.quantity-input').forEach(input => {
        const productId = input.id.replace('quantity-', '');
        
        input.addEventListener('change', () => {
            handleQuantityInputChange(productId);
        });
        
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                handleQuantityInputChange(productId);
            }
        });
    });
}

window.updateQuantityByButton = function(productId, delta) {
    const quantityInput = document.getElementById(`quantity-${productId}`);
    if (!quantityInput) return;
    
    const currentQuantity = parseInt(quantityInput.value) || 1;
    const newQuantity = currentQuantity + delta;
    
    if (newQuantity < 1) {
        if (confirm('¬øQuieres eliminar este producto del carrito?')) {
            removeFromCart(productId);
        }
        return;
    }
    
    quantityInput.value = newQuantity;
    calculateTotals();
    updateQuantity(productId, newQuantity);
};

document.addEventListener('DOMContentLoaded', function() {
    setupQuantityControls();
    
    setTimeout(() => {
        calculateTotals();
    }, 100);
    
    setInterval(syncWithServer, 30000);
});
</script>