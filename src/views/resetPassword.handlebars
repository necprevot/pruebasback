<div class="auth-container">
    <div class="auth-card">
        <div class="auth-header">
            <div class="auth-logo">
                <img src="/img/logo.png" alt="BBFermentos" class="logo-img">
                <h1>BBFermentos</h1>
            </div>
            <h2>Nueva Contrase√±a</h2>
            <p>Crea una contrase√±a segura para tu cuenta</p>
        </div>

        <!-- Alertas -->
        <div id="alertContainer"></div>

        <form id="resetPasswordForm" class="auth-form">
            <!-- Token oculto -->
            <input type="hidden" id="resetToken" name="token" value="{{token}}">
            
            <div class="form-group">
                <label for="newPassword">
                    <span class="label-icon">üîí</span>
                    Nueva Contrase√±a
                </label>
                <div class="password-field">
                    <input 
                        type="password" 
                        id="newPassword" 
                        name="newPassword" 
                        required 
                        class="form-input"
                        placeholder="M√≠nimo 6 caracteres"
                        autocomplete="new-password">
                    <button type="button" class="password-toggle" onclick="togglePassword('newPassword')">
                        üëÅÔ∏è
                    </button>
                </div>
                <div class="field-error" id="newPasswordError"></div>
                <div class="password-strength" id="passwordStrength"></div>
            </div>

            <div class="form-group">
                <label for="confirmPassword">
                    <span class="label-icon">üîí</span>
                    Confirmar Nueva Contrase√±a
                </label>
                <div class="password-field">
                    <input 
                        type="password" 
                        id="confirmPassword" 
                        name="confirmPassword" 
                        required 
                        class="form-input"
                        placeholder="Repite tu nueva contrase√±a"
                        autocomplete="new-password">
                    <button type="button" class="password-toggle" onclick="togglePassword('confirmPassword')">
                        üëÅÔ∏è
                    </button>
                </div>
                <div class="field-error" id="confirmPasswordError"></div>
            </div>

            <button type="submit" class="btn-auth btn-primary" id="resetBtn">
                <span class="btn-text">üîë Actualizar Contrase√±a</span>
                <span class="btn-spinner" style="display: none;">üîÑ</span>
            </button>
        </form>

        <div class="auth-divider">
            <span>o</span>
        </div>

        <div class="auth-footer">
            <p>¬øRecordaste tu contrase√±a?</p>
            <a href="/login" class="btn-auth btn-secondary">
                Volver al Login
            </a>
        </div>

        <div class="auth-help">
            <h4>üõ°Ô∏è Consejos de seguridad</h4>
            <ul>
                <li>Usa al menos 8 caracteres</li>
                <li>Combina letras, n√∫meros y s√≠mbolos</li>
                <li>Evita informaci√≥n personal</li>
                <li>No reutilices contrase√±as de otras cuentas</li>
            </ul>
        </div>

        {{#if isDevelopment}}
        <div class="auth-help" style="border: 2px solid #17a2b8; background: #d1ecf1;">
            <h4>üß™ Informaci√≥n de Debug</h4>
            <ul>
                <li><strong>Token:</strong> <code style="word-break: break-all;">{{token}}</code></li>
                <li>El token expira en 1 hora desde su generaci√≥n</li>
                <li>Un token solo puede usarse una vez</li>
            </ul>
        </div>
        {{/if}}
    </div>
</div>

<script>
// Configuraci√≥n
const RESET_PASSWORD_ENDPOINT = '/api/sessions/reset-password';

// Inicializar formulario
document.addEventListener('DOMContentLoaded', () => {
    initializeResetPasswordForm();
});

function initializeResetPasswordForm() {
    const form = document.getElementById('resetPasswordForm');
    if (!form) return;

    // Verificar que hay token
    const token = document.getElementById('resetToken').value;
    if (!token) {
        showAlert('Token de restablecimiento inv√°lido. Solicita un nuevo enlace.', 'error');
        setTimeout(() => {
            window.location.href = '/forgot-password';
        }, 3000);
        return;
    }

    // Limpiar errores al escribir
    form.querySelectorAll('.form-input').forEach(input => {
        input.addEventListener('input', () => {
            clearFieldError(input.id);
            
            // Validaci√≥n en tiempo real para contrase√±a
            if (input.id === 'newPassword') {
                updatePasswordStrength(input.value);
            }
            
            // Validaci√≥n para confirmaci√≥n de contrase√±a
            if (input.id === 'confirmPassword') {
                validatePasswordMatch();
            }
        });
    });

    // Manejar submit del formulario
    form.addEventListener('submit', handleResetPassword);

}

async function handleResetPassword(event) {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    const resetBtn = document.getElementById('resetBtn');
    const btnText = resetBtn.querySelector('.btn-text');
    const btnSpinner = resetBtn.querySelector('.btn-spinner');
    
    // Limpiar errores previos
    clearAllErrors();
    
    // Obtener datos
    const token = formData.get('token');
    const newPassword = formData.get('newPassword');
    const confirmPassword = formData.get('confirmPassword');
    
    // Validaciones b√°sicas
    if (!newPassword) {
        showFieldError('newPassword', 'La nueva contrase√±a es requerida');
        return;
    }
    
    if (newPassword.length < 6) {
        showFieldError('newPassword', 'La contrase√±a debe tener al menos 6 caracteres');
        return;
    }
    
    if (newPassword !== confirmPassword) {
        showFieldError('confirmPassword', 'Las contrase√±as no coinciden');
        return;
    }
    
    // UI de carga
    resetBtn.disabled = true;
    btnText.style.display = 'none';
    btnSpinner.style.display = 'inline';
    
    try {
        
        const response = await fetch(RESET_PASSWORD_ENDPOINT, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
                token, 
                newPassword, 
                confirmPassword 
            })
        });
        
        const data = await response.json();
        
        if (response.ok && data.status === 'success') {
            // Contrase√±a actualizada exitosamente
            showAlert(
                '¬°Contrase√±a actualizada exitosamente! Redirigiendo al login...',
                'success'
            );
            
            
            // Redirigir al login despu√©s de un momento
            setTimeout(() => {
                window.location.href = '/login?message=password_reset_success';
            }, 2000);
            
        } else {
            // Error en el restablecimiento
            const errorMessage = data.message || 'Error al restablecer la contrase√±a';
            
            // Mensajes personalizados seg√∫n el error
            if (errorMessage.includes('igual a la contrase√±a actual') || 
                errorMessage.includes('no puede ser igual')) {
                showAlert('‚ö†Ô∏è La nueva contrase√±a no puede ser igual a tu contrase√±a actual. Por favor elige una contrase√±a diferente.', 'warning');
            } else if (errorMessage.includes('inv√°lido') || errorMessage.includes('expirado')) {
                showAlert('‚ùå ' + errorMessage, 'error');
                setTimeout(() => {
                    window.location.href = '/forgot-password';
                }, 3000);
            } else {
                showAlert('‚ùå ' + errorMessage, 'error');
            }
        }
        
    } catch (error) {
        
        showAlert('Error de conexi√≥n. Por favor intenta de nuevo.', 'error');
    } finally {
        // Restaurar UI
        resetBtn.disabled = false;
        btnText.style.display = 'inline';
        btnSpinner.style.display = 'none';
    }
}

// Toggle password visibility
function togglePassword(fieldId) {
    const field = document.getElementById(fieldId);
    const toggleBtn = field.parentElement.querySelector('.password-toggle');
    
    if (field.type === 'password') {
        field.type = 'text';
        toggleBtn.textContent = 'üôà';
    } else {
        field.type = 'password';
        toggleBtn.textContent = 'üëÅÔ∏è';
    }
}

// Validar fuerza de contrase√±a
function getPasswordStrength(password) {
    if (password.length < 6) return { strength: 'weak', message: 'Muy d√©bil - M√≠nimo 6 caracteres' };
    if (password.length < 8) return { strength: 'fair', message: 'Regular - Mejor si tiene 8+ caracteres' };
    
    let score = 0;
    if (/[a-z]/.test(password)) score++;
    if (/[A-Z]/.test(password)) score++;
    if (/[0-9]/.test(password)) score++;
    if (/[^A-Za-z0-9]/.test(password)) score++;
    
    if (score >= 3) return { strength: 'strong', message: 'Fuerte ‚úÖ' };
    if (score >= 2) return { strength: 'medium', message: 'Buena - Agrega n√∫meros o s√≠mbolos' };
    return { strength: 'fair', message: 'Regular - Agrega may√∫sculas y n√∫meros' };
}

function updatePasswordStrength(password) {
    const strengthElement = document.getElementById('passwordStrength');
    if (!strengthElement) return;
    
    if (!password) {
        strengthElement.innerHTML = '';
        return;
    }
    
    const { strength, message } = getPasswordStrength(password);
    const colors = {
        weak: '#dc3545',
        fair: '#ffc107', 
        medium: '#fd7e14',
        strong: '#28a745'
    };
    
    strengthElement.innerHTML = `
        <div class="password-strength-bar">
            <div class="strength-indicator ${strength}" style="background-color: ${colors[strength]}"></div>
        </div>
        <span class="strength-text" style="color: ${colors[strength]}">${message}</span>
    `;
}

function validatePasswordMatch() {
    const password = document.getElementById('newPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    
    if (confirmPassword && password !== confirmPassword) {
        showFieldError('confirmPassword', 'Las contrase√±as no coinciden');
        return false;
    } else if (confirmPassword) {
        clearFieldError('confirmPassword');
        return true;
    }
    return true;
}

// Funciones de utilidad
function showFieldError(fieldId, message) {
    const errorElement = document.getElementById(fieldId + 'Error');
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }
    
    const field = document.getElementById(fieldId);
    if (field) {
        field.classList.add('error');
    }
}

function clearFieldError(fieldId) {
    const errorElement = document.getElementById(fieldId + 'Error');
    if (errorElement) {
        errorElement.textContent = '';
        errorElement.style.display = 'none';
    }
    
    const field = document.getElementById(fieldId);
    if (field) {
        field.classList.remove('error');
    }
}

function clearAllErrors() {
    const errorElements = document.querySelectorAll('.field-error');
    errorElements.forEach(el => {
        el.textContent = '';
        el.style.display = 'none';
    });
    
    const fields = document.querySelectorAll('.form-input');
    fields.forEach(field => field.classList.remove('error'));
}

function showAlert(message, type = 'info') {
    const alertContainer = document.getElementById('alertContainer');
    if (!alertContainer) return;

    const alertTypes = {
        success: { class: 'alert-success', icon: '‚úÖ' },
        error: { class: 'alert-danger', icon: '‚ùå' },
        warning: { class: 'alert-warning', icon: '‚ö†Ô∏è' },
        info: { class: 'alert-info', icon: '‚ÑπÔ∏è' }
    };

    const alert = alertTypes[type] || alertTypes.info;
    
    const alertHtml = `
        <div class="alert ${alert.class}" style="margin-bottom: 15px;">
            ${alert.icon} ${message}
            <button onclick="this.parentElement.remove()" class="alert-close">&times;</button>
        </div>
    `;
    
    alertContainer.innerHTML = alertHtml;
    
    // Auto-remover despu√©s de 8 segundos
    setTimeout(() => {
        const alertElement = alertContainer.querySelector('.alert');
        if (alertElement) alertElement.remove();
    }, 8000);
}

</script>