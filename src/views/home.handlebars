<h2>Lista de Productos</h2>

<!-- Status del carrito -->
<div id="cartStatus" class="mb-3" style="background: #f8f9fa; padding: 10px; border-radius: 4px; border: 1px solid #dee2e6;">
    <strong>üõí Carrito:</strong> <span id="cartCount">0</span> productos | 
    <button id="viewCartBtn" class="btn-primary" style="margin-left: 10px;">Ver Carrito</button>
    <button id="clearCartBtn" class="btn-danger" style="margin-left: 5px;">Limpiar Carrito</button>
    <button id="newCartBtn" class="btn-secondary" style="margin-left: 5px;">Nuevo Carrito</button>
</div>

<!-- Alertas -->
<div id="alertContainer"></div>

{{#if error}}
    <div class="alert alert-danger">
        {{error}}
    </div>
{{/if}}

{{#if products}}
    <div class="products-grid">
        {{#each products}}
        <div class="product-card">
            <div class="product-title">{{this.title}}</div>
            <div class="product-price">${{this.price}}</div>
            
            {{#if this.thumbnails}}
                {{#if this.thumbnails.length}}
                    <div class="product-images">
                        {{#each this.thumbnails}}
                            <img src="{{this}}" alt="{{../this.title}}" class="product-image" onerror="this.style.display='none';">
                        {{/each}}
                    </div>
                {{/if}}
            {{/if}}
            
            <p class="product-description">{{this.description}}</p>
            
            <div class="product-details">
                <strong>Stock:</strong> {{this.stock}} | 
                <strong>Categor√≠a:</strong> {{this.category}} | 
                <strong>Estado:</strong> <span class="{{#if this.status}}text-success{{else}}text-danger{{/if}}">{{#if this.status}}Activo{{else}}Inactivo{{/if}}</span><br>
                <strong>C√≥digo:</strong> {{this.code}}<br>
                <strong>ID:</strong> {{this._id}}
            </div>
            
            <!-- Controles del carrito -->
            {{#if this.status}}
                <div class="cart-controls" style="margin-top: 15px; padding-top: 15px; border-top: 1px solid #dee2e6;">
                    <div class="form-group" style="margin-bottom: 10px;">
                        <label for="quantity-{{this._id}}" style="font-size: 14px;">Cantidad:</label>
                        <input type="number" 
                               id="quantity-{{this._id}}" 
                               min="1" 
                               max="{{this.stock}}" 
                               value="1" 
                               style="width: 80px; padding: 5px; margin-left: 5px;">
                    </div>
                    <button onclick="addToCart('{{this._id}}', '{{this.title}}', {{this.price}}, {{this.stock}})" 
                            class="btn-success" 
                            style="width: 100%;">
                        üõí Agregar al Carrito
                    </button>
                </div>
            {{else}}
                <div style="margin-top: 15px; padding: 10px; background: #f8d7da; color: #721c24; border-radius: 4px; text-align: center;">
                    Producto no disponible
                </div>
            {{/if}}
        </div>
        {{/each}}
    </div>
{{else}}
    <div class="alert alert-danger">
        <p>No hay productos disponibles.</p>
    </div>
{{/if}}

<!-- Modal del carrito -->
<div id="cartModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border-radius: 8px; max-width: 600px; width: 90%; max-height: 80%; overflow-y: auto;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
            <h3>üõí Mi Carrito</h3>
            <button onclick="closeCartModal()" style="background: none; border: none; font-size: 24px; cursor: pointer;">&times;</button>
        </div>
        
        <div id="cartContent">
            <!-- Contenido del carrito se carga aqu√≠ -->
        </div>
        
        <div style="margin-top: 20px; padding-top: 20px; border-top: 1px solid #dee2e6;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <strong style="font-size: 18px;">Total: $<span id="cartTotal">0</span></strong>
                <div>
                    <button onclick="closeCartModal()" class="btn-secondary" style="margin-right: 10px;">Cerrar</button>
                    <button onclick="checkout()" class="btn-success">Finalizar Compra</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Variables globales
let currentCartId = null;
let cartItems = [];

// Funciones de gesti√≥n de carrito persistente
const CartSession = {
    // Guardar ID del carrito en localStorage
    save: function(cartId) {
        localStorage.setItem('bbfermentos_cart_id', cartId);
        localStorage.setItem('bbfermentos_cart_timestamp', Date.now().toString());
        console.log('üíæ Carrito guardado en sesi√≥n:', cartId);
    },
    
    // Obtener ID del carrito desde localStorage
    get: function() {
        const cartId = localStorage.getItem('bbfermentos_cart_id');
        const timestamp = localStorage.getItem('bbfermentos_cart_timestamp');
        
        // Verificar si el carrito no es muy antiguo (24 horas)
        if (cartId && timestamp) {
            const age = Date.now() - parseInt(timestamp);
            const maxAge = 24 * 60 * 60 * 1000; // 24 horas
            
            if (age < maxAge) {
                console.log('‚ôªÔ∏è Carrito recuperado de sesi√≥n:', cartId);
                return cartId;
            } else {
                console.log('‚è∞ Carrito expirado, creando uno nuevo');
                this.clear();
            }
        }
        return null;
    },
    
    // Limpiar sesi√≥n
    clear: function() {
        localStorage.removeItem('bbfermentos_cart_id');
        localStorage.removeItem('bbfermentos_cart_timestamp');
        console.log('üóëÔ∏è Sesi√≥n de carrito limpiada');
    },
    
    // Verificar si existe un carrito en el servidor
    verify: async function(cartId) {
        try {
            const response = await fetch(`/api/carts/${cartId}`);
            const exists = response.ok;
            console.log('üîç Verificaci√≥n de carrito:', cartId, exists ? '‚úÖ' : '‚ùå');
            return exists;
        } catch (error) {
            console.log('‚ùå Error verificando carrito:', error);
            return false;
        }
    }
};

// Inicializar carrito al cargar la p√°gina
document.addEventListener('DOMContentLoaded', async () => {
    await initializeCart();
});

// Inicializar carrito con persistencia
async function initializeCart() {
    try {
        console.log('üöÄ Inicializando carrito...');
        
        // Intentar recuperar carrito existente
        const savedCartId = CartSession.get();
        
        if (savedCartId) {
            // Verificar que el carrito todav√≠a existe en el servidor
            const cartExists = await CartSession.verify(savedCartId);
            
            if (cartExists) {
                currentCartId = savedCartId;
                console.log('‚úÖ Usando carrito existente:', currentCartId);
                await updateCartDisplay();
                return;
            } else {
                console.log('‚ö†Ô∏è Carrito no existe en servidor, creando uno nuevo');
                CartSession.clear();
            }
        }
        
        // Crear nuevo carrito si no hay uno v√°lido
        console.log('üÜï Creando nuevo carrito...');
        const response = await fetch('/api/carts', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            currentCartId = data.cart._id;
            CartSession.save(currentCartId);
            console.log('‚úÖ Nuevo carrito creado:', currentCartId);
            updateCartDisplay();
        } else {
            showAlert('Error al inicializar carrito', 'danger');
        }
    } catch (error) {
        console.error('‚ùå Error inicializando carrito:', error);
        showAlert('Error de conexi√≥n al inicializar carrito', 'danger');
    }
}

// Crear nuevo carrito manualmente
async function createNewCart() {
    if (confirm('¬øEst√°s seguro de que quieres crear un nuevo carrito? Se perder√° el carrito actual.')) {
        CartSession.clear();
        await initializeCart();
        showAlert('Nuevo carrito creado', 'success');
    }
}

// Agregar producto al carrito
async function addToCart(productId, productTitle, productPrice, productStock) {
    if (!currentCartId) {
        showAlert('Error: Carrito no inicializado', 'danger');
        await initializeCart();
        return;
    }
    
    const quantityInput = document.getElementById(`quantity-${productId}`);
    const quantity = parseInt(quantityInput.value);
    
    // Validaciones
    if (quantity < 1) {
        showAlert('La cantidad debe ser mayor a 0', 'danger');
        return;
    }
    
    if (quantity > productStock) {
        showAlert(`Solo hay ${productStock} unidades disponibles`, 'danger');
        return;
    }
    
    try {
        // Agregar m√∫ltiples veces seg√∫n la cantidad
        for (let i = 0; i < quantity; i++) {
            const response = await fetch(`/api/carts/${currentCartId}/product/${productId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message);
            }
        }
        
        showAlert(`${quantity} x ${productTitle} agregado al carrito`, 'success');
        quantityInput.value = 1; // Reset cantidad
        await updateCartDisplay();
        
        // Actualizar timestamp de actividad
        CartSession.save(currentCartId);
        
    } catch (error) {
        console.error('Error agregando al carrito:', error);
        showAlert('Error al agregar producto: ' + error.message, 'danger');
    }
}

// Actualizar display del carrito
async function updateCartDisplay() {
    if (!currentCartId) return;
    
    try {
        const response = await fetch(`/api/carts/${currentCartId}`);
        if (response.ok) {
            const data = await response.json();
            const cart = data.cart;
            cartItems = cart.products || [];
            
            // Actualizar contador
            const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);
            document.getElementById('cartCount').textContent = totalItems;
            
            // Actualizar timestamp si hay actividad
            if (totalItems > 0) {
                CartSession.save(currentCartId);
            }
            
        } else {
            console.error('Error obteniendo carrito');
            // Si el carrito no existe, crear uno nuevo
            if (response.status === 404) {
                console.log('üîÑ Carrito no encontrado, creando uno nuevo');
                CartSession.clear();
                await initializeCart();
            }
        }
    } catch (error) {
        console.error('Error actualizando carrito:', error);
    }
}

// Ver carrito - redirigir a vista espec√≠fica
async function viewCart() {
    if (!currentCartId) {
        showAlert('Carrito no inicializado', 'danger');
        await initializeCart();
        return;
    }
    
    // Verificar que el carrito existe antes de redirigir
    const cartExists = await CartSession.verify(currentCartId);
    if (!cartExists) {
        showAlert('El carrito no existe, creando uno nuevo...', 'warning');
        await initializeCart();
        return;
    }
    
    // Redirigir a la vista espec√≠fica del carrito
    window.location.href = `/carts/${currentCartId}`;
}

// Limpiar carrito
async function clearCart() {
    if (!currentCartId) return;
    
    if (confirm('¬øEst√°s seguro de que quieres limpiar el carrito?')) {
        try {
            const response = await fetch(`/api/carts/${currentCartId}`, {
                method: 'DELETE'
            });
            
            if (response.ok) {
                showAlert('Carrito limpiado', 'success');
                await updateCartDisplay();
            } else {
                showAlert('Error al limpiar carrito', 'danger');
            }
        } catch (error) {
            console.error('Error limpiando carrito:', error);
            showAlert('Error de conexi√≥n', 'danger');
        }
    }
}

// Finalizar compra
function checkout() {
    if (cartItems.length === 0) {
        showAlert('El carrito est√° vac√≠o', 'warning');
        return;
    }
    
    showAlert('Funci√≥n de checkout en desarrollo', 'info');
}

// Cerrar modal
function closeCartModal() {
    document.getElementById('cartModal').style.display = 'none';
}

// Mostrar alertas
function showAlert(message, type) {
    const alertContainer = document.getElementById('alertContainer');
    const alertClass = `alert-${type}`;
    
    const alertHtml = `
        <div class="alert ${alertClass}" style="margin-bottom: 15px;">
            ${message}
            <button onclick="this.parentElement.remove()" style="float: right; background: none; border: none; font-size: 18px; cursor: pointer;">&times;</button>
        </div>
    `;
    
    alertContainer.innerHTML = alertHtml;
    
    // Auto-remover despu√©s de 5 segundos
    setTimeout(() => {
        const alert = alertContainer.querySelector('.alert');
        if (alert) alert.remove();
    }, 5000);
}

// Event listeners
document.getElementById('viewCartBtn').addEventListener('click', viewCart);
document.getElementById('clearCartBtn').addEventListener('click', clearCart);
document.getElementById('newCartBtn').addEventListener('click', createNewCart);

// Cerrar modal al hacer click fuera
document.getElementById('cartModal').addEventListener('click', (e) => {
    if (e.target.id === 'cartModal') {
        closeCartModal();
    }
});

// Debug: Informaci√≥n del carrito
console.log('üõí Sistema de carrito persistente inicializado');
console.log('üì± Funciones disponibles: CartSession.get(), CartSession.clear()');

// Funci√≥n global para debug
window.cartDebug = function() {
    console.log('=== CART SESSION DEBUG ===');
    console.log('Current Cart ID:', currentCartId);
    console.log('Saved Cart ID:', CartSession.get());
    console.log('Cart Items:', cartItems.length);
    console.log('LocalStorage:', {
        cartId: localStorage.getItem('bbfermentos_cart_id'),
        timestamp: localStorage.getItem('bbfermentos_cart_timestamp')
    });
};
</script>