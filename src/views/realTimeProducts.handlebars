<h2>Productos en Tiempo Real</h2>

<div id="status" class="mb-3">
    <span id="connectionStatus" style="color: orange;">Conectando...</span>
</div>

<!-- Interruptor de Administrador -->
<div class="admin-toggle mb-3">
    <label for="adminToggle" style="display: flex; align-items: center; gap: 10px; font-weight: bold;">
        <span>Modo Administrador:</span>
        <select id="adminToggle" style="width: auto; padding: 5px;">
            <option value="false">No</option>
            <option value="true">S√≠</option>
        </select>
        <span id="adminStatus" class="text-danger">Desactivado</span>
    </label>
</div>

{{#if success}}
    <div class="alert alert-success">
        {{success}}
    </div>
{{/if}}

{{#if error}}
    <div class="alert alert-danger">
        {{error}}
    </div>
{{/if}}

<div id="adminSection" style="display: none;">
    <h3>Agregar Nuevo Producto</h3>
    <form id="productForm">
        <div class="form-group">
            <label for="title">T√≠tulo:</label>
            <input type="text" id="title" name="title" required>
        </div>
        
        <div class="form-group">
            <label for="description">Descripci√≥n:</label>
            <textarea id="description" name="description" required></textarea>
        </div>
        
        <div class="form-group">
            <label for="price">Precio:</label>
            <input type="number" id="price" name="price" min="0" step="1" required>
        </div>
        
        <div class="form-group">
            <label for="status">Estado:</label>
            <select id="status" name="status" required>
                <option value="">Selecciona un estado</option>
                <option value="true">Activo</option>
                <option value="false">Inactivo</option>
            </select>
        </div>
        
        <div class="form-group">
            <label for="stock">Stock:</label>
            <input type="number" id="stock" name="stock" min="0" required>
        </div>
        
        <div class="form-group">
            <label for="category">Categor√≠a:</label>
            <input type="text" id="category" name="category" required>
        </div>
        
        <div class="form-group">
            <label for="thumbnails">Im√°genes (nombres de archivo separados por comas):</label>
            <input type="text" id="thumbnails" name="thumbnails" placeholder="cerezas.png, chucrut.jpg">
            <small>Solo ingresa el nombre del archivo. Las im√°genes deben estar en public/img/</small>
        </div>
        
        <button type="submit" class="btn-primary">Agregar Producto</button>
    </form>
    
    <hr>
</div>

<div id="nonAdminMessage" class="alert alert-danger">
    <strong>Acceso restringido:</strong> Solo los administradores pueden agregar, editar o eliminar productos. Active el modo administrador para acceder a estas funciones.
</div>

<!-- Modal de Edici√≥n -->
<div id="editModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 30px; border-radius: 8px; max-width: 600px; width: 90%; max-height: 90%; overflow-y: auto; box-shadow: 0 4px 20px rgba(0,0,0,0.3);">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; border-bottom: 2px solid #dee2e6; padding-bottom: 15px;">
            <h3 style="margin: 0; color: #333;">‚úèÔ∏è Editar Producto</h3>
            <button onclick="closeEditModal()" style="background: none; border: none; font-size: 28px; cursor: pointer; color: #666;">&times;</button>
        </div>
        
        <form id="editProductForm">
            <input type="hidden" id="editProductId">
            
            <div class="form-group">
                <label for="editTitle">T√≠tulo:</label>
                <input type="text" id="editTitle" name="title" required>
            </div>
            
            <div class="form-group">
                <label for="editDescription">Descripci√≥n:</label>
                <textarea id="editDescription" name="description" required rows="4"></textarea>
            </div>
            
            <div class="form-group">
                <label for="editPrice">Precio:</label>
                <input type="number" id="editPrice" name="price" min="0" step="1" required>
            </div>
            
            <div class="form-group">
                <label for="editStatus">Estado:</label>
                <select id="editStatus" name="status" required>
                    <option value="true">Activo</option>
                    <option value="false">Inactivo</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="editStock">Stock:</label>
                <input type="number" id="editStock" name="stock" min="0" required>
            </div>
            
            <div class="form-group">
                <label for="editCategory">Categor√≠a:</label>
                <input type="text" id="editCategory" name="category" required>
            </div>
            
            <div class="form-group">
                <label for="editThumbnails">Im√°genes (nombres de archivo separados por comas):</label>
                <input type="text" id="editThumbnails" name="thumbnails" placeholder="cerezas.png, chucrut.jpg">
                <small>Solo ingresa el nombre del archivo. Las im√°genes deben estar en public/img/</small>
            </div>
            
            <div style="display: flex; gap: 15px; justify-content: flex-end; margin-top: 25px; padding-top: 20px; border-top: 1px solid #dee2e6;">
                <button type="button" onclick="closeEditModal()" class="btn-secondary">Cancelar</button>
                <button type="submit" class="btn-primary">üíæ Guardar Cambios</button>
            </div>
        </form>
    </div>
</div>

<h3>Lista de Productos</h3>
<div id="productsList">
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    console.log('üîÑ Iniciando realTimeProducts...');
    
    const socket = io();
    const productsList = document.getElementById('productsList');
    const connectionStatus = document.getElementById('connectionStatus');
    const productForm = document.getElementById('productForm');
    const editProductForm = document.getElementById('editProductForm');
    const adminToggle = document.getElementById('adminToggle');
    const adminStatus = document.getElementById('adminStatus');
    const adminSection = document.getElementById('adminSection');
    const nonAdminMessage = document.getElementById('nonAdminMessage');
    const editModal = document.getElementById('editModal');

    let isAdmin = false;

    // Verificar que todos los elementos existan
    console.log('üîç Verificando elementos DOM:', {
        productsList: !!productsList,
        connectionStatus: !!connectionStatus,
        productForm: !!productForm,
        adminToggle: !!adminToggle
    });

    adminToggle.addEventListener('change', (e) => {
        isAdmin = e.target.value === 'true';
        console.log('üëë Admin mode changed to:', isAdmin);
        updateAdminInterface();
    });

    function updateAdminInterface() {
        console.log('üîß Updating interface, isAdmin:', isAdmin);
        
        if (isAdmin) {
            adminStatus.textContent = 'Activado';
            adminStatus.className = 'text-success';
            adminSection.style.display = 'block';
            nonAdminMessage.style.display = 'none';
        } else {
            adminStatus.textContent = 'Desactivado';
            adminStatus.className = 'text-danger';
            adminSection.style.display = 'none';
            nonAdminMessage.style.display = 'block';
        }
        
        const currentProducts = JSON.parse(sessionStorage.getItem('currentProducts') || '[]');
        console.log('üì¶ Current products from session:', currentProducts.length);
        if (currentProducts.length > 0) {
            renderProducts(currentProducts);
        }
    }

    socket.on('connect', () => {
        console.log('‚úÖ Conectado al servidor con ID:', socket.id);
        connectionStatus.textContent = 'Conectado ‚úì';
        connectionStatus.style.color = 'green';
        
        // Solicitar productos inmediatamente despu√©s de conectar
        console.log('üì° Solicitando productos iniciales...');
        socket.emit('requestProducts');
    });

    socket.on('disconnect', (reason) => {
        console.log('‚ùå Desconectado del servidor. Raz√≥n:', reason);
        connectionStatus.textContent = 'Desconectado ‚úó';
        connectionStatus.style.color = 'red';
    });

    socket.on('connect_error', (error) => {
        console.error('üí• Error de conexi√≥n:', error);
        connectionStatus.textContent = 'Error de conexi√≥n ‚úó';
        connectionStatus.style.color = 'red';
    });

    socket.on('updateProducts', (products) => {
        console.log('üì¶ Productos recibidos del servidor:', {
            isArray: Array.isArray(products),
            length: products ? products.length : 0,
            firstProduct: products && products[0] ? {
                id: products[0]._id,
                title: products[0].title
            } : null
        });
        
        if (!products) {
            console.error('‚ùå Productos es null o undefined');
            productsList.innerHTML = '<div class="alert alert-danger"><p>Error: No se recibieron productos del servidor.</p></div>';
            return;
        }
        
        if (!Array.isArray(products)) {
            console.error('‚ùå Productos no es un array:', typeof products);
            productsList.innerHTML = '<div class="alert alert-danger"><p>Error: Formato de productos inv√°lido.</p></div>';
            return;
        }
        
        sessionStorage.setItem('currentProducts', JSON.stringify(products));
        renderProducts(products);
    });

    function renderProducts(products) {
        console.log('üé® Renderizando productos:', {
            count: products ? products.length : 0,
            isAdmin: isAdmin
        });
        
        if (!productsList) {
            console.error('‚ùå Elemento productsList no encontrado');
            return;
        }
        
        if (!products || products.length === 0) {
            console.log('‚ö†Ô∏è No hay productos para mostrar');
            productsList.innerHTML = `
                <div class="alert alert-warning">
                    <h4>üì¶ No hay productos disponibles</h4>
                    <p>Los productos aparecer√°n aqu√≠ autom√°ticamente cuando se agreguen al sistema.</p>
                    <p><strong>Estado de conexi√≥n:</strong> ${socket.connected ? 'Conectado ‚úÖ' : 'Desconectado ‚ùå'}</p>
                </div>
            `;
            return;
        }

        console.log('‚úÖ Generando HTML para', products.length, 'productos');
        
        const productsHTML = products.map((product, index) => {
            console.log(`üîç Procesando producto ${index + 1}:`, {
                id: product._id,
                title: product.title,
                price: product.price,
                stock: product.stock
            });
            
            return `
                <div class="realtime-product" style="border: 1px solid #ddd; margin: 15px 0; padding: 15px; border-radius: 8px; background: #f9f9f9;">
                    <h4 style="margin: 0 0 10px 0; color: #333;">
                        ${product.title || 'Sin t√≠tulo'} - 
                        <span class="text-success" style="color: #28a745;">$${product.price || 0}</span>
                    </h4>
                    <p class="product-description" style="margin: 10px 0; color: #666;">
                        ${product.description || 'Sin descripci√≥n'}
                    </p>
                    <div class="product-details" style="margin: 10px 0; font-size: 14px; color: #555;">
                        <strong>Stock:</strong> ${product.stock || 0} | 
                        <strong>Categor√≠a:</strong> ${product.category || 'Sin categor√≠a'} | 
                        <strong>Estado:</strong> <span style="color: ${product.status ? '#28a745' : '#dc3545'}">${product.status ? 'Activo' : 'Inactivo'}</span> | 
                        <strong>C√≥digo:</strong> ${product.code || 'N/A'} | 
                        <strong>ID:</strong> <small>${product._id || 'N/A'}</small>
                    </div>
                    ${product.thumbnails && product.thumbnails.length > 0 ? 
                        `<div class="product-images" style="margin: 15px 0;">
                            ${product.thumbnails.map(img => 
                                `<img src="${img}" alt="${product.title}" style="width: 60px; height: 60px; object-fit: cover; margin: 5px; border-radius: 4px; border: 1px solid #ddd;" onerror="this.style.display='none'; console.log('Error cargando imagen:', '${img}');">`
                            ).join('')}
                        </div>` : 
                        '<div style="color: #999; font-style: italic; margin: 10px 0;">Sin im√°genes</div>'
                    }
                    
                    <div style="margin-top: 15px; display: flex; gap: 10px; flex-wrap: wrap;">
                        ${isAdmin ? `
                            <button onclick="editProduct('${product._id}')" style="background: #007bff; color: white; border: none; padding: 8px 15px; border-radius: 4px; cursor: pointer; font-size: 14px;">
                                ‚úèÔ∏è Editar
                            </button>
                            <button onclick="deleteProduct('${product._id}')" style="background: #dc3545; color: white; border: none; padding: 8px 15px; border-radius: 4px; cursor: pointer; font-size: 14px;">
                                üóëÔ∏è Eliminar
                            </button>
                        ` : `
                            <div style="color: #6c757d; font-style: italic; padding: 8px; background: #f8f9fa; border-radius: 4px; font-size: 12px;">
                                Solo administradores pueden editar o eliminar productos
                            </div>
                        `}
                    </div>
                </div>
            `;
        }).join('');

        console.log('üìù HTML generado, longitud:', productsHTML.length);
        productsList.innerHTML = productsHTML;
        console.log('‚úÖ Productos renderizados exitosamente en el DOM');
    }

    // Funci√≥n para editar producto
    window.editProduct = function(productId) {
        console.log('‚úèÔ∏è Funci√≥n editProduct llamada para:', productId);
        
        if (!isAdmin) {
            alert('Solo los administradores pueden editar productos. Active el modo administrador.');
            return;
        }
        
        const currentProducts = JSON.parse(sessionStorage.getItem('currentProducts') || '[]');
        const product = currentProducts.find(p => p._id === productId);
        
        if (!product) {
            console.error('‚ùå Producto no encontrado:', productId);
            alert('Producto no encontrado');
            return;
        }
        
        console.log('üìù Llenando formulario de edici√≥n con:', product);
        
        document.getElementById('editProductId').value = product._id;
        document.getElementById('editTitle').value = product.title;
        document.getElementById('editDescription').value = product.description;
        document.getElementById('editPrice').value = product.price;
        document.getElementById('editStatus').value = product.status.toString();
        document.getElementById('editStock').value = product.stock;
        document.getElementById('editCategory').value = product.category;
        
        let thumbnailNames = '';
        if (product.thumbnails && product.thumbnails.length > 0) {
            thumbnailNames = product.thumbnails.map(url => url.replace('/img/', '')).join(', ');
        }
        document.getElementById('editThumbnails').value = thumbnailNames;
        
        editModal.style.display = 'block';
    }

    // Funci√≥n para eliminar producto
    window.deleteProduct = function(productId) {
        console.log('üóëÔ∏è Funci√≥n deleteProduct llamada para:', productId);
        
        if (!isAdmin) {
            alert('Solo los administradores pueden eliminar productos. Active el modo administrador.');
            return;
        }
        
        if (confirm('¬øEst√°s seguro de que quieres eliminar este producto?')) {
            console.log('‚úÖ Confirmado, enviando deleteProduct al servidor');
            socket.emit('deleteProduct', productId);
        }
    }

    // Cerrar modal de edici√≥n
    window.closeEditModal = function() {
        editModal.style.display = 'none';
        editProductForm.reset();
    }

    // Event listeners
    editProductForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        if (!isAdmin) {
            alert('Solo los administradores pueden editar productos. Active el modo administrador.');
            return;
        }
        
        const formData = new FormData(editProductForm);
        const productId = document.getElementById('editProductId').value;
        const thumbnails = formData.get('thumbnails');
        
        const thumbnailsArray = thumbnails ? 
            thumbnails.split(',')
                .map(filename => filename.trim())
                .filter(filename => filename)
                .map(filename => `/img/${filename}`) : 
            [];
        
        const productData = {
            title: formData.get('title'),
            description: formData.get('description'),
            price: parseInt(formData.get('price')),
            status: formData.get('status') === 'true',
            stock: parseInt(formData.get('stock')),
            category: formData.get('category'),
            thumbnails: thumbnailsArray
        };

        console.log('üì§ Enviando actualizaci√≥n de producto:', { productId, productData });
        socket.emit('updateProduct', { productId, productData });
        closeEditModal();
    });

    productForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        if (!isAdmin) {
            alert('Solo los administradores pueden agregar productos. Active el modo administrador.');
            return;
        }
        
        const formData = new FormData(productForm);
        const thumbnails = formData.get('thumbnails');
        
        const thumbnailsArray = thumbnails ? 
            thumbnails.split(',')
                .map(filename => filename.trim())
                .filter(filename => filename)
                .map(filename => `/img/${filename}`) : 
            [];
        
        const productData = {
            title: formData.get('title'),
            description: formData.get('description'),
            price: parseInt(formData.get('price')),
            status: formData.get('status') === 'true',
            stock: parseInt(formData.get('stock')),
            category: formData.get('category'),
            thumbnails: thumbnailsArray
        };

        console.log('üì§ Enviando nuevo producto:', productData);
        socket.emit('addProduct', productData);
        productForm.reset();
    });

    // Manejar respuestas del servidor
    socket.on('error', (error) => {
        console.error('üí• Error del servidor:', error);
        alert('Error: ' + error.message);
    });

    socket.on('productUpdated', (data) => {
        console.log('üì• Respuesta productUpdated:', data);
        if (data.success) {
            console.log('‚úÖ Producto actualizado exitosamente:', data.product);
        } else {
            alert('Error al actualizar producto: ' + data.message);
        }
    });

    socket.on('productAdded', (data) => {
        console.log('üì• Respuesta productAdded:', data);
        if (data.success) {
            console.log('‚úÖ Producto agregado exitosamente:', data.product);
        } else {
            alert('Error al agregar producto: ' + data.message);
        }
    });

    socket.on('productDeleted', (data) => {
        console.log('üì• Respuesta productDeleted:', data);
        if (data.success) {
            console.log('‚úÖ Producto eliminado exitosamente:', data.productId);
        }
    });

    // Cerrar modal al hacer click fuera
    editModal.addEventListener('click', (e) => {
        if (e.target === editModal) {
            closeEditModal();
        }
    });

    // Inicializar interfaz
    updateAdminInterface();
    
    console.log('üöÄ Script de realTimeProducts inicializado completamente');
    
    // Verificar si hay productos del servidor (renderizados por Handlebars)
    const serverProducts = {{{json products}}};
    console.log('üìã Productos del servidor (Handlebars):', serverProducts);
    
    if (serverProducts && serverProducts.length > 0) {
        console.log('‚úÖ Renderizando productos iniciales del servidor');
        sessionStorage.setItem('currentProducts', JSON.stringify(serverProducts));
        renderProducts(serverProducts);
    } else {
        console.log('‚ö†Ô∏è No hay productos iniciales del servidor');
    }
</script>