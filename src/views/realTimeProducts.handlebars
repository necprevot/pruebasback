<h2>Productos en Tiempo Real</h2>

<div id="status" class="mb-3">
    <span id="connectionStatus" style="color: orange;">Conectando...</span>
</div>

<!-- Interruptor de Administrador -->
<div class="admin-toggle mb-3">
    <label for="adminToggle" style="display: flex; align-items: center; gap: 10px; font-weight: bold;">
        <span>Modo Administrador:</span>
        <select id="adminToggle" style="width: auto; padding: 5px;">
            <option value="false">No</option>
            <option value="true">Sí</option>
        </select>
        <span id="adminStatus" class="text-danger">Desactivado</span>
    </label>
</div>

{{#if success}}
    <div class="alert alert-success">
        {{success}}
    </div>
{{/if}}

{{#if error}}
    <div class="alert alert-danger">
        {{error}}
    </div>
{{/if}}

<div id="adminSection" style="display: none;">
    <h3>Agregar Nuevo Producto</h3>
    <form id="productForm">
        <div class="form-group">
            <label for="title">Título:</label>
            <input type="text" id="title" name="title" required>
        </div>
        
        <div class="form-group">
            <label for="description">Descripción:</label>
            <textarea id="description" name="description" required></textarea>
        </div>
        
        <div class="form-group">
            <label for="price">Precio:</label>
            <input type="number" id="price" name="price" min="0" step="1" required>
        </div>
        
        <div class="form-group">
            <label for="status">Estado:</label>
            <select id="status" name="status" required>
                <option value="">Selecciona un estado</option>
                <option value="true">Activo</option>
                <option value="false">Inactivo</option>
            </select>
        </div>
        
        <div class="form-group">
            <label for="stock">Stock:</label>
            <input type="number" id="stock" name="stock" min="0" required>
        </div>
        
        <div class="form-group">
            <label for="category">Categoría:</label>
            <input type="text" id="category" name="category" required>
        </div>
        
        <div class="form-group">
            <label for="thumbnails">Imágenes (nombres de archivo separados por comas):</label>
            <input type="text" id="thumbnails" name="thumbnails" placeholder="cerezas.png, chucrut.jpg">
            <small>Solo ingresa el nombre del archivo. Las imágenes deben estar en public/img/</small>
        </div>
        
        <button type="submit" class="btn-primary">Agregar Producto</button>
    </form>
    
    <hr>
</div>

<div id="nonAdminMessage" class="alert alert-danger">
    <strong>Acceso restringido:</strong> Solo los administradores pueden agregar o eliminar productos. Active el modo administrador para acceder a estas funciones.
</div>

<h3>Lista de Productos</h3>
<div id="productsList">
    <!-- Los productos se cargarán aquí dinámicamente -->
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    const productsList = document.getElementById('productsList');
    const connectionStatus = document.getElementById('connectionStatus');
    const productForm = document.getElementById('productForm');
    const adminToggle = document.getElementById('adminToggle');
    const adminStatus = document.getElementById('adminStatus');
    const adminSection = document.getElementById('adminSection');
    const nonAdminMessage = document.getElementById('nonAdminMessage');

    // Variable para controlar el modo administrador
    let isAdmin = false;

    // Manejo del interruptor de administrador
    adminToggle.addEventListener('change', (e) => {
        isAdmin = e.target.value === 'true';
        console.log('Admin mode changed to:', isAdmin);
        updateAdminInterface();
    });

    // Función para actualizar la interfaz según el modo administrador
    function updateAdminInterface() {
        console.log('Updating interface, isAdmin:', isAdmin);
        
        if (isAdmin) {
            adminStatus.textContent = 'Activado';
            adminStatus.className = 'text-success';
            adminSection.style.display = 'block';
            nonAdminMessage.style.display = 'none';
        } else {
            adminStatus.textContent = 'Desactivado';
            adminStatus.className = 'text-danger';
            adminSection.style.display = 'none';
            nonAdminMessage.style.display = 'block';
        }
        
        // Re-renderizar productos para mostrar/ocultar botones de eliminar
        const currentProducts = JSON.parse(sessionStorage.getItem('currentProducts') || '[]');
        if (currentProducts.length > 0) {
            renderProducts(currentProducts);
        }
    }

    // Manejo de conexión
    socket.on('connect', () => {
        console.log('Conectado al servidor');
        connectionStatus.textContent = 'Conectado ✓';
        connectionStatus.style.color = 'green';
    });

    socket.on('disconnect', () => {
        console.log('Desconectado del servidor');
        connectionStatus.textContent = 'Desconectado ✗';
        connectionStatus.style.color = 'red';
    });

    // Recibir productos actualizados
    socket.on('updateProducts', (products) => {
        console.log('Productos actualizados:', products);
        // Guardar productos en sessionStorage para re-renderizar cuando cambie el modo admin
        sessionStorage.setItem('currentProducts', JSON.stringify(products));
        renderProducts(products);
    });

    // Función para renderizar productos
    function renderProducts(products) {
        if (!products || products.length === 0) {
            productsList.innerHTML = '<div class="alert alert-danger"><p>No hay productos disponibles.</p></div>';
            return;
        }

        const productsHTML = products.map(product => `
            <div class="realtime-product">
                <h4>${product.title} - <span class="text-success">$${product.price}</span></h4>
                <p class="product-description">${product.description}</p>
                <div class="product-details">
                    Stock: ${product.stock} | 
                    Categoría: ${product.category} | 
                    Estado: <span class="${product.status ? 'text-success' : 'text-danger'}">${product.status ? 'Activo' : 'Inactivo'}</span> | 
                    Código: ${product.code}
                </div>
                ${product.thumbnails && product.thumbnails.length > 0 ? 
                    `<div class="product-images">
                        ${product.thumbnails.map(img => 
                            `<img src="${img}" alt="${product.title}" class="product-image" onerror="this.style.display='none';">`
                        ).join('')}
                    </div>` : ''}
                ${isAdmin ? `
                    <button onclick="deleteProduct(${product.id})" class="btn-danger mt-3">
                        Eliminar
                    </button>
                ` : `
                    <div class="mt-3" style="color: #6c757d; font-style: italic;">
                        Solo administradores pueden eliminar productos
                    </div>
                `}
            </div>
        `).join('');

        productsList.innerHTML = productsHTML;
    }

    // Función para eliminar producto (solo si es admin)
    window.deleteProduct = function(productId) {
        if (!isAdmin) {
            alert('Solo los administradores pueden eliminar productos. Active el modo administrador.');
            return;
        }
        
        if (confirm('¿Estás seguro de que quieres eliminar este producto?')) {
            socket.emit('deleteProduct', productId);
        }
    }

    // Manejo del formulario (solo si es admin)
    productForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        if (!isAdmin) {
            alert('Solo los administradores pueden agregar productos. Active el modo administrador.');
            return;
        }
        
        const formData = new FormData(productForm);
        const thumbnails = formData.get('thumbnails');
        
        // Procesar thumbnails - SIMPLIFICADO
        const thumbnailsArray = thumbnails ? 
            thumbnails.split(',')
                .map(filename => filename.trim())
                .filter(filename => filename) : 
            [];
        
        const productData = {
            title: formData.get('title'),
            description: formData.get('description'),
            price: parseInt(formData.get('price')),
            status: formData.get('status') === 'true',
            stock: parseInt(formData.get('stock')),
            category: formData.get('category'),
            thumbnails: thumbnailsArray  // Solo nombres de archivo
        };

        socket.emit('addProduct', productData);
        productForm.reset();
    });

    // Manejo de errores
    socket.on('error', (error) => {
        alert('Error: ' + error.message);
    });

    // Inicializar interfaz
    updateAdminInterface();
</script>