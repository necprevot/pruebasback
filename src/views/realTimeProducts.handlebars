<h2>Productos en Tiempo Real</h2>

<div id="status" style="margin-bottom: 10px;">
    <span id="connectionStatus" style="color: orange;">Conectando...</span>
</div>

{{#if success}}
    <div style="color: green; margin-bottom: 10px;">
        {{success}}
    </div>
{{/if}}

{{#if error}}
    <div style="color: red; margin-bottom: 10px;">
        {{error}}
    </div>
{{/if}}

<h3>Agregar Nuevo Producto</h3>
<form id="productForm">
    <div>
        <label for="title">Título:</label>
        <input type="text" id="title" name="title" required>
    </div>
    
    <div>
        <label for="description">Descripción:</label>
        <textarea id="description" name="description" required></textarea>
    </div>
    
    <div>
        <label for="price">Precio:</label>
        <input type="number" id="price" name="price" min="0" step="1" required>
    </div>
    
    <div>
        <label for="status">Estado:</label>
        <select id="status" name="status" required>
            <option value="">Selecciona un estado</option>
            <option value="true">Activo</option>
            <option value="false">Inactivo</option>
        </select>
    </div>
    
    <div>
        <label for="stock">Stock:</label>
        <input type="number" id="stock" name="stock" min="0" required>
    </div>
    
    <div>
        <label for="category">Categoría:</label>
        <input type="text" id="category" name="category" required>
    </div>
    
    <div>
        <label for="thumbnails">Imágenes (URLs separadas por comas):</label>
        <input type="text" id="thumbnails" name="thumbnails" placeholder="https://ejemplo.com/img1.jpg, https://ejemplo.com/img2.jpg">
    </div>
    
    <button type="submit">Agregar Producto</button>
</form>

<hr>

<h3>Lista de Productos</h3>
<div id="productsList">
    <!-- Los productos se cargarán aquí dinámicamente -->
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    const productsList = document.getElementById('productsList');
    const connectionStatus = document.getElementById('connectionStatus');
    const productForm = document.getElementById('productForm');

    // Manejo de conexión
    socket.on('connect', () => {
        console.log('Conectado al servidor');
        connectionStatus.textContent = 'Conectado ✓';
        connectionStatus.style.color = 'green';
    });

    socket.on('disconnect', () => {
        console.log('Desconectado del servidor');
        connectionStatus.textContent = 'Desconectado ✗';
        connectionStatus.style.color = 'red';
    });

    // Recibir productos actualizados
    socket.on('updateProducts', (products) => {
        console.log('Productos actualizados:', products);
        renderProducts(products);
    });

    // Función para renderizar productos
    function renderProducts(products) {
        if (!products || products.length === 0) {
            productsList.innerHTML = '<p>No hay productos disponibles.</p>';
            return;
        }

        const productsHTML = products.map(product => `
            <div style="border: 1px solid #ccc; margin: 10px 0; padding: 10px;">
                <h4>${product.title} - $${product.price}</h4>
                <p>${product.description}</p>
                <small>
                    Stock: ${product.stock} | 
                    Categoría: ${product.category} | 
                    Estado: ${product.status ? 'Activo' : 'Inactivo'} | 
                    Código: ${product.code}
                </small>
                ${product.thumbnails && product.thumbnails.length > 0 ? 
                    `<br><small>Imágenes: ${product.thumbnails.length} archivo(s)</small>` : ''}
                <br>
                <button onclick="deleteProduct(${product.id})" 
                        style="background-color: #dc3545; color: white; border: none; padding: 5px 10px; cursor: pointer; margin-top: 5px;">
                    Eliminar
                </button>
            </div>
        `).join('');

        productsList.innerHTML = productsHTML;
    }

    // Función para eliminar producto
    function deleteProduct(productId) {
        if (confirm('¿Estás seguro de que quieres eliminar este producto?')) {
            socket.emit('deleteProduct', productId);
        }
    }

    // Manejo del formulario
    productForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        const formData = new FormData(productForm);
        const thumbnails = formData.get('thumbnails');
        
        const productData = {
            title: formData.get('title'),
            description: formData.get('description'),
            price: parseInt(formData.get('price')),
            status: formData.get('status') === 'true',
            stock: parseInt(formData.get('stock')),
            category: formData.get('category'),
            thumbnails: thumbnails ? thumbnails.split(',').map(url => url.trim()).filter(url => url) : []
        };

        socket.emit('addProduct', productData);
        productForm.reset();
    });

    // Manejo de errores
    socket.on('error', (error) => {
        alert('Error: ' + error.message);
    });
</script>