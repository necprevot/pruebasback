<!-- CONTENIDO SOLO PARA ADMIN (ya verificado por middleware) -->
<h2>üîß Panel de Administraci√≥n - Productos en Tiempo Real</h2>

<div id="status" class="mb-3">
    <span id="connectionStatus" style="color: orange;">Conectando...</span>
</div>

<!-- FORMULARIO DE CREACI√ìN -->
<div id="adminSection">
    <h3>‚ûï Crear Nuevo Producto</h3>
    <form id="productForm">
        <div class="form-group">
            <label for="title">T√≠tulo:</label>
            <input type="text" id="title" name="title" required>
        </div>
        
        <div class="form-group">
            <label for="description">Descripci√≥n:</label>
            <textarea id="description" name="description" required></textarea>
        </div>
        
        <div class="form-group">
            <label for="price">Precio:</label>
            <input type="number" id="price" name="price" min="0" step="1" required>
        </div>
        
        <div class="form-group">
            <label for="status">Estado:</label>
            <select id="status" name="status" required>
                <option value="">Selecciona un estado</option>
                <option value="true">Activo</option>
                <option value="false">Inactivo</option>
            </select>
        </div>
        
        <div class="form-group">
            <label for="stock">Stock:</label>
            <input type="number" id="stock" name="stock" min="0" required>
        </div>
        
        <div class="form-group">
            <label for="category">Categor√≠a:</label>
            <input type="text" id="category" name="category" required>
        </div>
        
        <div class="form-group">
            <label for="thumbnails">Im√°genes (nombres de archivo separados por comas):</label>
            <input type="text" id="thumbnails" name="thumbnails" placeholder="cerezas.png, chucrut.jpg">
            <small>Solo ingresa el nombre del archivo. Las im√°genes deben estar en public/img/</small>
        </div>
        
        <button type="submit" class="btn-primary">‚ûï Crear Producto</button>
    </form>
    
    <hr>
</div>

<!-- Modal de Edici√≥n (mismo c√≥digo que antes) -->
<div id="editModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 30px; border-radius: 8px; max-width: 600px; width: 90%; max-height: 90%; overflow-y: auto; box-shadow: 0 4px 20px rgba(0,0,0,0.3);">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; border-bottom: 2px solid #dee2e6; padding-bottom: 15px;">
            <h3 style="margin: 0; color: #333;">‚úèÔ∏è Editar Producto</h3>
            <button onclick="closeEditModal()" style="background: none; border: none; font-size: 28px; cursor: pointer; color: #666;">&times;</button>
        </div>
        
        <form id="editProductForm">
            <input type="hidden" id="editProductId">
            
            <div class="form-group">
                <label for="editTitle">T√≠tulo:</label>
                <input type="text" id="editTitle" name="title" required>
            </div>
            
            <div class="form-group">
                <label for="editDescription">Descripci√≥n:</label>
                <textarea id="editDescription" name="description" required rows="4"></textarea>
            </div>
            
            <div class="form-group">
                <label for="editPrice">Precio:</label>
                <input type="number" id="editPrice" name="price" min="0" step="1" required>
            </div>
            
            <div class="form-group">
                <label for="editStatus">Estado:</label>
                <select id="editStatus" name="status" required>
                    <option value="true">Activo</option>
                    <option value="false">Inactivo</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="editStock">Stock:</label>
                <input type="number" id="editStock" name="stock" min="0" required>
            </div>
            
            <div class="form-group">
                <label for="editCategory">Categor√≠a:</label>
                <input type="text" id="editCategory" name="category" required>
            </div>
            
            <div class="form-group">
                <label for="editThumbnails">Im√°genes (nombres de archivo separados por comas):</label>
                <input type="text" id="editThumbnails" name="thumbnails" placeholder="cerezas.png, chucrut.jpg">
                <small>Solo ingresa el nombre del archivo. Las im√°genes deben estar en public/img/</small>
            </div>
            
            <div style="display: flex; gap: 15px; justify-content: flex-end; margin-top: 25px; padding-top: 20px; border-top: 1px solid #dee2e6;">
                <button type="button" onclick="closeEditModal()" class="btn-secondary">Cancelar</button>
                <button type="submit" class="btn-primary">üíæ Guardar Cambios</button>
            </div>
        </form>
    </div>
</div>

<h3>üì¶ Lista de Productos</h3>
<div id="productsList"></div>

<script src="/socket.io/socket.io.js"></script>
<script>
    
    // Obtener token de autenticaci√≥n
    function getAuthToken() {
        return localStorage.getItem('bbfermentos_auth_token');
    }
    
    const token = getAuthToken();
    
    if (!token) {
        
        
        window.location.href = '/login';
    }
    
    // Configurar socket con token
    const socket = io({
        auth: {
            token: token
        }
    });

    const productsList = document.getElementById('productsList');
    const connectionStatus = document.getElementById('connectionStatus');
    const productForm = document.getElementById('productForm');
    const editProductForm = document.getElementById('editProductForm');
    const editModal = document.getElementById('editModal');

    socket.on('connect', () => {
        connectionStatus.textContent = 'Conectado ‚úì';
        connectionStatus.style.color = 'green';
        socket.emit('requestProducts');
    });

    socket.on('disconnect', (reason) => {
        connectionStatus.textContent = 'Desconectado ‚úó';
        connectionStatus.style.color = 'red';
    });

    socket.on('updateProducts', (products) => {
        if (products) {
            sessionStorage.setItem('currentProducts', JSON.stringify(products));
            renderProducts(products);
        }
    });

    function renderProducts(products) {
        if (!productsList) return;
        
        if (!products || products.length === 0) {
            productsList.innerHTML = '<div class="alert alert-warning"><h4>üì¶ No hay productos disponibles</h4></div>';
            return;
        }

        const productsHTML = products.map(product => `
            <div class="realtime-product" style="border: 1px solid #ddd; margin: 15px 0; padding: 15px; border-radius: 8px;">
                <h4>${product.title} - <span style="color: #28a745;">$${product.price}</span></h4>
                <p>${product.description}</p>
                <div style="margin: 10px 0; font-size: 14px;">
                    <strong>Stock:</strong> ${product.stock} | 
                    <strong>Categor√≠a:</strong> ${product.category} | 
                    <strong>Estado:</strong> ${product.status ? 'Activo' : 'Inactivo'}
                </div>
                <div style="margin-top: 15px;">
                    <button onclick="editProduct('${product._id}')" class="btn-info">‚úèÔ∏è Editar</button>
                    <button onclick="deleteProduct('${product._id}')" class="btn-danger">üóëÔ∏è Eliminar</button>
                </div>
            </div>
        `).join('');

        productsList.innerHTML = productsHTML;
    }

    window.editProduct = function(productId) {
        const currentProducts = JSON.parse(sessionStorage.getItem('currentProducts') || '[]');
        const product = currentProducts.find(p => p._id === productId);
        
        if (!product) return 
        
        document.getElementById('editProductId').value = product._id;
        document.getElementById('editTitle').value = product.title;
        document.getElementById('editDescription').value = product.description;
        document.getElementById('editPrice').value = product.price;
        document.getElementById('editStatus').value = product.status.toString();
        document.getElementById('editStock').value = product.stock;
        document.getElementById('editCategory').value = product.category;
        document.getElementById('editThumbnails').value = product.thumbnails?.map(url => url.replace('/img/', '')).join(', ') || '';
        
        editModal.style.display = 'block';
    }

    window.deleteProduct = function(productId) {
        if (confirm('¬øEst√°s seguro?')) {
            socket.emit('deleteProduct', productId);
        }
    }

    window.closeEditModal = function() {
        editModal.style.display = 'none';
        editProductForm.reset();
    }

    editProductForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const formData = new FormData(editProductForm);
        const productId = document.getElementById('editProductId').value;
        
        const productData = {
            title: formData.get('title'),
            description: formData.get('description'),
            price: parseInt(formData.get('price')),
            status: formData.get('status') === 'true',
            stock: parseInt(formData.get('stock')),
            category: formData.get('category'),
            thumbnails: formData.get('thumbnails')?.split(',').map(f => `/img/${f.trim()}`).filter(Boolean) || []
        };

        socket.emit('updateProduct', { productId, productData });
        closeEditModal();
    });

    productForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const formData = new FormData(productForm);
        
        const productData = {
            title: formData.get('title'),
            description: formData.get('description'),
            price: parseInt(formData.get('price')),
            status: formData.get('status') === 'true',
            stock: parseInt(formData.get('stock')),
            category: formData.get('category'),
            thumbnails: formData.get('thumbnails')?.split(',').map(f => `/img/${f.trim()}`).filter(Boolean) || []
        };

        socket.emit('addProduct', productData);
        productForm.reset();
    });

    socket.on('error', (error) => {
        
        if (error.code === 'FORBIDDEN') {
            
            window.location.href = '/products';
        }
    });
</script>