<h2>Productos en Tiempo Real</h2>

<div id="status" class="mb-3">
    <span id="connectionStatus" style="color: orange;">Conectando...</span>
</div>

<!-- Interruptor de Administrador -->
<div class="admin-toggle mb-3">
    <label for="adminToggle" style="display: flex; align-items: center; gap: 10px; font-weight: bold;">
        <span>Modo Administrador:</span>
        <select id="adminToggle" style="width: auto; padding: 5px;">
            <option value="false">No</option>
            <option value="true">S√≠</option>
        </select>
        <span id="adminStatus" class="text-danger">Desactivado</span>
    </label>
</div>

{{#if success}}
    <div class="alert alert-success">
        {{success}}
    </div>
{{/if}}

{{#if error}}
    <div class="alert alert-danger">
        {{error}}
    </div>
{{/if}}

<div id="adminSection" style="display: none;">
    <h3>Agregar Nuevo Producto</h3>
    <form id="productForm">
        <div class="form-group">
            <label for="title">T√≠tulo:</label>
            <input type="text" id="title" name="title" required>
        </div>
        
        <div class="form-group">
            <label for="description">Descripci√≥n:</label>
            <textarea id="description" name="description" required></textarea>
        </div>
        
        <div class="form-group">
            <label for="price">Precio:</label>
            <input type="number" id="price" name="price" min="0" step="1" required>
        </div>
        
        <div class="form-group">
            <label for="status">Estado:</label>
            <select id="status" name="status" required>
                <option value="">Selecciona un estado</option>
                <option value="true">Activo</option>
                <option value="false">Inactivo</option>
            </select>
        </div>
        
        <div class="form-group">
            <label for="stock">Stock:</label>
            <input type="number" id="stock" name="stock" min="0" required>
        </div>
        
        <div class="form-group">
            <label for="category">Categor√≠a:</label>
            <input type="text" id="category" name="category" required>
        </div>
        
        <div class="form-group">
            <label for="thumbnails">Im√°genes (nombres de archivo separados por comas):</label>
            <input type="text" id="thumbnails" name="thumbnails" placeholder="cerezas.png, chucrut.jpg">
            <small>Solo ingresa el nombre del archivo. Las im√°genes deben estar en public/img/</small>
        </div>
        
        <button type="submit" class="btn-primary">Agregar Producto</button>
    </form>
    
    <hr>
</div>

<div id="nonAdminMessage" class="alert alert-danger">
    <strong>Acceso restringido:</strong> Solo los administradores pueden agregar, editar o eliminar productos. Active el modo administrador para acceder a estas funciones.
</div>

<!-- Modal de Edici√≥n -->
<div id="editModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 30px; border-radius: 8px; max-width: 600px; width: 90%; max-height: 90%; overflow-y: auto; box-shadow: 0 4px 20px rgba(0,0,0,0.3);">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; border-bottom: 2px solid #dee2e6; padding-bottom: 15px;">
            <h3 style="margin: 0; color: #333;">‚úèÔ∏è Editar Producto</h3>
            <button onclick="closeEditModal()" style="background: none; border: none; font-size: 28px; cursor: pointer; color: #666;">&times;</button>
        </div>
        
        <form id="editProductForm">
            <input type="hidden" id="editProductId">
            
            <div class="form-group">
                <label for="editTitle">T√≠tulo:</label>
                <input type="text" id="editTitle" name="title" required>
            </div>
            
            <div class="form-group">
                <label for="editDescription">Descripci√≥n:</label>
                <textarea id="editDescription" name="description" required rows="4"></textarea>
            </div>
            
            <div class="form-group">
                <label for="editPrice">Precio:</label>
                <input type="number" id="editPrice" name="price" min="0" step="1" required>
            </div>
            
            <div class="form-group">
                <label for="editStatus">Estado:</label>
                <select id="editStatus" name="status" required>
                    <option value="true">Activo</option>
                    <option value="false">Inactivo</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="editStock">Stock:</label>
                <input type="number" id="editStock" name="stock" min="0" required>
            </div>
            
            <div class="form-group">
                <label for="editCategory">Categor√≠a:</label>
                <input type="text" id="editCategory" name="category" required>
            </div>
            
            <div class="form-group">
                <label for="editThumbnails">Im√°genes (nombres de archivo separados por comas):</label>
                <input type="text" id="editThumbnails" name="thumbnails" placeholder="cerezas.png, chucrut.jpg">
                <small>Solo ingresa el nombre del archivo. Las im√°genes deben estar en public/img/</small>
            </div>
            
            <div style="display: flex; gap: 15px; justify-content: flex-end; margin-top: 25px; padding-top: 20px; border-top: 1px solid #dee2e6;">
                <button type="button" onclick="closeEditModal()" class="btn-secondary">Cancelar</button>
                <button type="submit" class="btn-primary">üíæ Guardar Cambios</button>
            </div>
        </form>
    </div>
</div>

<h3>Lista de Productos</h3>
<div id="productsList">
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    const productsList = document.getElementById('productsList');
    const connectionStatus = document.getElementById('connectionStatus');
    const productForm = document.getElementById('productForm');
    const editProductForm = document.getElementById('editProductForm');
    const adminToggle = document.getElementById('adminToggle');
    const adminStatus = document.getElementById('adminStatus');
    const adminSection = document.getElementById('adminSection');
    const nonAdminMessage = document.getElementById('nonAdminMessage');
    const editModal = document.getElementById('editModal');

    let isAdmin = false;

    adminToggle.addEventListener('change', (e) => {
        isAdmin = e.target.value === 'true';
        console.log('Admin mode changed to:', isAdmin);
        updateAdminInterface();
    });

    function updateAdminInterface() {
        console.log('Updating interface, isAdmin:', isAdmin);
        
        if (isAdmin) {
            adminStatus.textContent = 'Activado';
            adminStatus.className = 'text-success';
            adminSection.style.display = 'block';
            nonAdminMessage.style.display = 'none';
        } else {
            adminStatus.textContent = 'Desactivado';
            adminStatus.className = 'text-danger';
            adminSection.style.display = 'none';
            nonAdminMessage.style.display = 'block';
        }
        
        const currentProducts = JSON.parse(sessionStorage.getItem('currentProducts') || '[]');
        if (currentProducts.length > 0) {
            renderProducts(currentProducts);
        }
    }

    socket.on('connect', () => {
        console.log('Conectado al servidor');
        connectionStatus.textContent = 'Conectado ‚úì';
        connectionStatus.style.color = 'green';
    });

    socket.on('disconnect', () => {
        console.log('Desconectado del servidor');
        connectionStatus.textContent = 'Desconectado ‚úó';
        connectionStatus.style.color = 'red';
    });

    socket.on('updateProducts', (products) => {
        console.log('Productos actualizados:', products);
        sessionStorage.setItem('currentProducts', JSON.stringify(products));
        renderProducts(products);
    });

    function renderProducts(products) {
        if (!products || products.length === 0) {
            productsList.innerHTML = '<div class="alert alert-danger"><p>No hay productos disponibles.</p></div>';
            return;
        }

        const productsHTML = products.map(product => `
            <div class="realtime-product">
                <h4>${product.title} - <span class="text-success">$${product.price}</span></h4>
                <p class="product-description">${product.description}</p>
                <div class="product-details">
                    Stock: ${product.stock} | 
                    Categor√≠a: ${product.category} | 
                    Estado: <span class="${product.status ? 'text-success' : 'text-danger'}">${product.status ? 'Activo' : 'Inactivo'}</span> | 
                    C√≥digo: ${product.code} | 
                    ID: ${product._id}
                </div>
                ${product.thumbnails && product.thumbnails.length > 0 ? 
                    `<div class="product-images">
                        ${product.thumbnails.map(img => 
                            `<img src="${img}" alt="${product.title}" class="product-image" onerror="this.style.display='none';">`
                        ).join('')}
                    </div>` : ''}
                
                <div style="margin-top: 15px; display: flex; gap: 10px; flex-wrap: wrap;">
                    ${isAdmin ? `
                        <button onclick="editProduct('${product._id}')" class="btn-primary" style="display: flex; align-items: center; gap: 5px;">
                            ‚úèÔ∏è Editar
                        </button>
                        <button onclick="deleteProduct('${product._id}')" class="btn-danger">
                            üóëÔ∏è Eliminar
                        </button>
                    ` : `
                        <div style="color: #6c757d; font-style: italic; padding: 8px;">
                            Solo administradores pueden editar o eliminar productos
                        </div>
                    `}
                </div>
            </div>
        `).join('');

        productsList.innerHTML = productsHTML;
    }

    // Funci√≥n para editar producto
    window.editProduct = function(productId) {
        if (!isAdmin) {
            alert('Solo los administradores pueden editar productos. Active el modo administrador.');
            return;
        }
        
        console.log('Editando producto:', productId);
        
        // Buscar el producto en los datos actuales
        const currentProducts = JSON.parse(sessionStorage.getItem('currentProducts') || '[]');
        const product = currentProducts.find(p => p._id === productId);
        
        if (!product) {
            alert('Producto no encontrado');
            return;
        }
        
        // Llenar el formulario de edici√≥n
        document.getElementById('editProductId').value = product._id;
        document.getElementById('editTitle').value = product.title;
        document.getElementById('editDescription').value = product.description;
        document.getElementById('editPrice').value = product.price;
        document.getElementById('editStatus').value = product.status.toString();
        document.getElementById('editStock').value = product.stock;
        document.getElementById('editCategory').value = product.category;
        
        // Procesar thumbnails para mostrar solo los nombres de archivo
        let thumbnailNames = '';
        if (product.thumbnails && product.thumbnails.length > 0) {
            thumbnailNames = product.thumbnails.map(url => {
                // Extraer solo el nombre del archivo de la URL
                return url.replace('/img/', '');
            }).join(', ');
        }
        document.getElementById('editThumbnails').value = thumbnailNames;
        
        // Mostrar modal
        editModal.style.display = 'block';
    }

    // Funci√≥n para eliminar producto
    window.deleteProduct = function(productId) {
        if (!isAdmin) {
            alert('Solo los administradores pueden eliminar productos. Active el modo administrador.');
            return;
        }
        
        if (confirm('¬øEst√°s seguro de que quieres eliminar este producto?')) {
            socket.emit('deleteProduct', productId);
        }
    }

    // Cerrar modal de edici√≥n
    window.closeEditModal = function() {
        editModal.style.display = 'none';
        editProductForm.reset();
    }

    // Manejar env√≠o del formulario de edici√≥n
    editProductForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        if (!isAdmin) {
            alert('Solo los administradores pueden editar productos. Active el modo administrador.');
            return;
        }
        
        const formData = new FormData(editProductForm);
        const productId = document.getElementById('editProductId').value;
        const thumbnails = formData.get('thumbnails');
        
        const thumbnailsArray = thumbnails ? 
            thumbnails.split(',')
                .map(filename => filename.trim())
                .filter(filename => filename)
                .map(filename => `/img/${filename}`) : 
            [];
        
        const productData = {
            title: formData.get('title'),
            description: formData.get('description'),
            price: parseInt(formData.get('price')),
            status: formData.get('status') === 'true',
            stock: parseInt(formData.get('stock')),
            category: formData.get('category'),
            thumbnails: thumbnailsArray
        };

        console.log('Enviando actualizaci√≥n de producto:', productId, productData);
        socket.emit('updateProduct', { productId, productData });
        closeEditModal();
    });

    // Manejar env√≠o del formulario de agregar producto
    productForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        if (!isAdmin) {
            alert('Solo los administradores pueden agregar productos. Active el modo administrador.');
            return;
        }
        
        const formData = new FormData(productForm);
        const thumbnails = formData.get('thumbnails');
        
        const thumbnailsArray = thumbnails ? 
            thumbnails.split(',')
                .map(filename => filename.trim())
                .filter(filename => filename)
                .map(filename => `/img/${filename}`) : 
            [];
        
        const productData = {
            title: formData.get('title'),
            description: formData.get('description'),
            price: parseInt(formData.get('price')),
            status: formData.get('status') === 'true',
            stock: parseInt(formData.get('stock')),
            category: formData.get('category'),
            thumbnails: thumbnailsArray
        };

        socket.emit('addProduct', productData);
        productForm.reset();
    });

    // Manejar respuestas del servidor
    socket.on('error', (error) => {
        alert('Error: ' + error.message);
    });

    socket.on('productUpdated', (data) => {
        if (data.success) {
            console.log('Producto actualizado exitosamente:', data.product);
            // Los productos se actualizar√°n autom√°ticamente v√≠a updateProducts
        } else {
            alert('Error al actualizar producto: ' + data.message);
        }
    });

    // Cerrar modal al hacer click fuera
    editModal.addEventListener('click', (e) => {
        if (e.target === editModal) {
            closeEditModal();
        }
    });

    // Inicializar interfaz
    updateAdminInterface();
</script>